!function(o,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms"),require("@ngx-formly/core"),require("@ngx-formly/core/select")):"function"==typeof define&&define.amd?define("@ngx-formly/bootstrap",["exports","@angular/core","@angular/common","@angular/forms","@ngx-formly/core","@ngx-formly/core/select"],t):t((o["ngx-formly"]=o["ngx-formly"]||{},o["ngx-formly"].bootstrap={}),o.ng.core,o.ng.common,o.ng.forms,o.core$1,o.select)}(this,function(o,e,t,n,r,l){"use strict";var i=function(o,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var e in t)t.hasOwnProperty(e)&&(o[e]=t[e])})(o,t)};function a(o,t){function e(){this.constructor=o}i(o,t),o.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}var s=function(){return(s=Object.assign||function(o){for(var t,e=1,n=arguments.length;e<n;e++)for(var r in t=arguments[e])Object.prototype.hasOwnProperty.call(t,r)&&(o[r]=t[r]);return o}).apply(this,arguments)};function p(o,t){var e="function"==typeof Symbol&&o[Symbol.iterator];if(!e)return o;var n,r,l=e.call(o),i=[];try{for(;(void 0===t||0<t--)&&!(n=l.next()).done;)i.push(n.value)}catch(a){r={error:a}}finally{try{n&&!n.done&&(e=l["return"])&&e.call(l)}finally{if(r)throw r.error}}return i}function c(){for(var o=[],t=0;t<arguments.length;t++)o=o.concat(p(arguments[t]));return o}var d=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),t.decorators=[{type:e.Component,args:[{selector:"formly-field-checkbox",template:'\n    <div class="custom-control custom-checkbox">\n      <input class="custom-control-input" type="checkbox"\n        [class.is-invalid]="showError"\n        [indeterminate]="to.indeterminate && field.formControl.value === null"\n        [formControl]="formControl"\n        [formlyAttributes]="field">\n      <label class="custom-control-label" [for]="id">\n        {{ to.label }}\n        <span *ngIf="to.required && to.hideRequiredMarker !== true">*</span>\n      </label>\n    </div>\n  '}]}],t}(r.FieldType),u=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),t.prototype.onChange=function(t,o){var e;"array"===this.to.type?this.formControl.patchValue(o?c(this.formControl.value||[],[t]):c(this.formControl.value||[]).filter(function(o){return o!==t})):this.formControl.patchValue(s({},this.formControl.value,((e={})[t]=o,e))),this.formControl.markAsTouched()},t.decorators=[{type:e.Component,args:[{selector:"formly-field-multicheckbox",template:'\n    <div class="custom-control custom-checkbox" *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;">\n      <input class="custom-control-input" type="checkbox"\n        [id]="id + \'_\' + i"\n        [value]="option.value"\n        [checked]="formControl.value && (this.to.type === \'array\' ? formControl.value.includes(option.value) : formControl.value[option.value])"\n        [formlyAttributes]="field"\n        (change)="onChange(option.value, $event.target.checked)">\n      <label class="custom-control-label" [for]="id + \'_\' + i">\n        {{ option.label }}\n      </label>\n    </div>\n  '}]}],t}(r.FieldType),f=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),Object.defineProperty(t.prototype,"type",{get:function(){return this.to.type||"text"},enumerable:!0,configurable:!0}),t.decorators=[{type:e.Component,args:[{selector:"formly-field-input",template:'\n    <input *ngIf="type !== \'number\' else numberTmp" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    <ng-template #numberTmp>\n      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    </ng-template>\n  ',host:{"[class.d-inline-flex]":"to.addonLeft || to.addonRight","[class.custom-file]":"to.addonLeft || to.addonRight"}}]}],t}(r.FieldType),m=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),t.decorators=[{type:e.Component,args:[{selector:"formly-field-radio",template:'\n    <div [formGroup]="form">\n      <div class="custom-control custom-radio" *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;">\n        <input class="custom-control-input" type="radio"\n          [id]="id + \'_\' + i"\n          [name]="id"\n          [class.is-invalid]="showError"\n          [attr.value]="option.value"\n          [value]="option.value"\n          [formControl]="formControl"\n          [formlyAttributes]="field">\n        <label class="custom-control-label" [for]="id + \'_\' + i">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  '}]}],t}(r.FieldType),g=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),t.decorators=[{type:e.Component,args:[{selector:"formly-field-textarea",template:'\n    <textarea [formControl]="formControl" [cols]="to.cols"\n      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n    </textarea>\n  '}]}],t}(r.FieldType),y=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),t.decorators=[{type:e.Component,args:[{selector:"formly-field-select",template:'\n    <select *ngIf="to.multiple; else singleSelect" class="form-control"\n      multiple\n      [class.custom-select]="to.customSelect"\n      [formControl]="formControl"\n      [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n        <ng-container *ngFor="let item of to.options | formlySelectOptions:field | async">\n         <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [ngValue]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [ngValue]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class="form-control"\n        [formControl]="formControl"\n        [class.custom-select]="to.customSelect"\n        [class.is-invalid]="showError"\n        [formlyAttributes]="field">\n        <option *ngIf="to.placeholder" [ngValue]="null">{{ to.placeholder }}</option>\n        <ng-container *ngFor="let item of to.options | formlySelectOptions:field | async">\n          <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [ngValue]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [ngValue]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  '}]}],t}(r.FieldType),h=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),t.decorators=[{type:e.Component,args:[{selector:"formly-wrapper-form-field",template:'\n    <div class="form-group" [class.has-error]="showError">\n      <label *ngIf="to.label && to.hideLabel !== true" [attr.for]="id">\n        {{ to.label }}\n        <span *ngIf="to.required && to.hideRequiredMarker !== true">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf="showError" class="invalid-feedback" [style.display]="\'block\'">\n        <formly-validation-message [field]="field"></formly-validation-message>\n      </div>\n\n      <small *ngIf="to.description" class="form-text text-muted">{{ to.description }}</small>\n    </div>\n  '}]}],t.propDecorators={fieldComponent:[{type:e.ViewChild,args:["fieldComponent",{read:e.ViewContainerRef}]}]},t}(r.FieldWrapper),b=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return a(t,o),t.prototype.addonRightClick=function(o){this.to.addonRight.onClick&&this.to.addonRight.onClick(this.to,this,o)},t.prototype.addonLeftClick=function(o){this.to.addonLeft.onClick&&this.to.addonLeft.onClick(this.to,this,o)},t.decorators=[{type:e.Component,args:[{selector:"formly-wrapper-addons",template:'\n    <div class="input-group">\n      <div class="input-group-prepend"\n        *ngIf="to.addonLeft"\n        [ngStyle]="{cursor: to.addonLeft.onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonLeftClick($event)">\n        <i class="input-group-text" [ngClass]="to.addonLeft.class" *ngIf="to.addonLeft.class"></i>\n        <span *ngIf="to.addonLeft.text" class="input-group-text">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class="input-group-append"\n        *ngIf="to.addonRight"\n        [ngStyle]="{cursor: to.addonRight.onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonRightClick($event)">\n        <i class="input-group-text" [ngClass]="to.addonRight.class" *ngIf="to.addonRight.class"></i>\n        <span *ngIf="to.addonRight.text" class="input-group-text">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  ',styles:["\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "]}]}],t.propDecorators={fieldComponent:[{type:e.ViewChild,args:["fieldComponent",{read:e.ViewContainerRef}]}]},t}(r.FieldWrapper),v=function(){function o(){}return o.prototype.run=function(o){o.templateManipulators.postWrapper.push(function(o){if(o&&o.templateOptions&&(o.templateOptions.addonLeft||o.templateOptions.addonRight))return"addons"})},o}(),C=[f,d,m,y,g,u,b,h],x={types:[{name:"input",component:f,wrappers:["form-field"]},{name:"checkbox",component:d,wrappers:["form-field"],defaultOptions:{templateOptions:{indeterminate:!0,hideLabel:!0}}},{name:"radio",component:m,wrappers:["form-field"],defaultOptions:{templateOptions:{options:[]}}},{name:"select",component:y,wrappers:["form-field"],defaultOptions:{templateOptions:{options:[]}}},{name:"textarea",component:g,wrappers:["form-field"],defaultOptions:{templateOptions:{cols:1,rows:1}}},{name:"multicheckbox",component:u,wrappers:["form-field"],defaultOptions:{templateOptions:{options:[]}}}],wrappers:[{name:"addons",component:b},{name:"form-field",component:h}],manipulators:[{"class":v,method:"run"}]},F=function(){function o(){}return o.decorators=[{type:e.NgModule,args:[{declarations:[C],imports:[t.CommonModule,n.ReactiveFormsModule,l.FormlySelectModule,r.FormlyModule.forRoot(x)]}]}],o}();o.FormlyBootstrapModule=F,o.FormlyFieldCheckbox=d,o.FormlyFieldMultiCheckbox=u,o.FormlyFieldInput=f,o.FormlyFieldRadio=m,o.FormlyFieldTextArea=g,o.FormlyFieldSelect=y,o.FormlyWrapperFormField=h,o.FormlyWrapperAddons=b,o.ɵb=x,o.ɵa=C,o.ɵc=v,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-bootstrap.umd.min.js.map