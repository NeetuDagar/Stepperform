import { __assign } from 'tslib';
import { Injectable, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyJsonschema = /** @class */ (function () {
    function FormlyJsonschema() {
    }
    /**
     * @param {?} jsonSchema
     * @return {?}
     */
    FormlyJsonschema.prototype.toFieldConfig = /**
     * @param {?} jsonSchema
     * @return {?}
     */
    function (jsonSchema) {
        return this._toFieldConfig(jsonSchema);
    };
    /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    FormlyJsonschema.prototype._toFieldConfig = /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    function (jsonSchema, key) {
        var _this = this;
        /** @type {?} */
        var field = __assign({}, (key ? { key: key } : {}), { type: (/** @type {?} */ (jsonSchema.type)), defaultValue: jsonSchema.default, templateOptions: {
                minLength: jsonSchema.minLength,
                maxLength: jsonSchema.maxLength,
                label: jsonSchema.title,
                readonly: jsonSchema.readOnly,
                pattern: jsonSchema.pattern,
                description: jsonSchema.description,
            } });
        if (jsonSchema.enum) {
            if (field.type === 'integer' || field.type === 'number') {
                field.parsers = [Number];
            }
            field.type = 'enum';
            field.templateOptions.options = jsonSchema.enum;
            field.templateOptions.labelProp = function (item) { return item; };
            field.templateOptions.valueProp = function (item) { return item; };
        }
        switch (jsonSchema.type) {
            case 'object': {
                field.fieldGroup = [];
                Object.keys(jsonSchema.properties).forEach(function (p) {
                    /** @type {?} */
                    var child = _this._toFieldConfig((/** @type {?} */ (jsonSchema.properties[p])), p);
                    if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                        child.templateOptions.required = true;
                    }
                    field.fieldGroup.push(child);
                });
                break;
            }
            case 'array': {
                if (!Array.isArray(jsonSchema.items)) {
                    field.fieldArray = this._toFieldConfig((/** @type {?} */ (jsonSchema.items)));
                }
                else {
                    field['_fieldArray'] = [];
                    field.fieldGroup = [];
                    jsonSchema.items.forEach(function (item) { return field['_fieldArray'].push(_this._toFieldConfig((/** @type {?} */ (item)))); });
                    if (jsonSchema.additionalItems) {
                        field['_additionalFieldArray'] = this._toFieldConfig((/** @type {?} */ (jsonSchema.additionalItems)));
                    }
                    Object.defineProperty(field, 'fieldArray', {
                        get: function () {
                            return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                        },
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        return field;
    };
    FormlyJsonschema.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ FormlyJsonschema.ngInjectableDef = defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
    return FormlyJsonschema;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyJsonschema };

//# sourceMappingURL=ngx-formly-core-json-schema.js.map