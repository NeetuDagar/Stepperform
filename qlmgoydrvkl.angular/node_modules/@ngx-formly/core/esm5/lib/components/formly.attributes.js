/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Input, Renderer2 } from '@angular/core';
var FormlyAttributes = /** @class */ (function () {
    function FormlyAttributes(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.field.focus = true;
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.field.focus = false;
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    };
    Object.defineProperty(FormlyAttributes.prototype, "to", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field.templateOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyAttributes.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.field) {
            /** @type {?} */
            var fieldChanges = changes.field;
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                this.setAttributes(this.to.attributes);
                Object.defineProperty(this.to, 'attributes', {
                    get: function () { return _this.to.__attributes__; },
                    set: function (attributes) { return _this.setAttributes(attributes); },
                    enumerable: true,
                    configurable: true,
                });
            }
            if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    };
    /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/formly-js/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     */
    /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/formly-js/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     * @return {?}
     */
    FormlyAttributes.prototype.ngDoCheck = /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/formly-js/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     * @return {?}
     */
    function () {
        if (this.placeholder !== this.to.placeholder) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'placeholder', this.to.placeholder);
            this.placeholder = this.to.placeholder;
        }
        if (this.tabindex !== this.to.tabindex) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'tabindex', "" + (this.to.tabindex || 0));
            this.tabindex = this.to.tabindex;
        }
        if (this.readonly !== this.to.readonly) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'readonly', "" + this.to.readonly);
            this.readonly = this.to.readonly;
        }
    };
    /**
     * @private
     * @param {?} attributes
     * @return {?}
     */
    FormlyAttributes.prototype.setAttributes = /**
     * @private
     * @param {?} attributes
     * @return {?}
     */
    function (attributes) {
        var _this = this;
        if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {
            Object.keys(this.to.__attributes__).forEach(function (name) { return _this.renderer.removeAttribute(_this.elementRef.nativeElement, name); });
        }
        this.to.__attributes__ = attributes;
        Object.keys(attributes).forEach(function (name) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, name, (/** @type {?} */ (attributes[name]))); });
    };
    FormlyAttributes.decorators = [
        { type: Directive, args: [{
                    selector: '[formlyAttributes]',
                    host: {
                        '[attr.name]': 'field.name',
                        '[attr.step]': 'to.step',
                        '(keyup)': 'to.keyup && to.keyup(field, $event)',
                        '(keydown)': 'to.keydown && to.keydown(field, $event)',
                        '(click)': 'to.click && to.click(field, $event)',
                        '(change)': 'to.change && to.change(field, $event)',
                        '(keypress)': 'to.keypress && to.keypress(field, $event)',
                    },
                },] }
    ];
    /** @nocollapse */
    FormlyAttributes.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FormlyAttributes.propDecorators = {
        field: [{ type: Input, args: ['formlyAttributes',] }],
        onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
        onBlur: [{ type: HostListener, args: ['blur', ['$event'],] }]
    };
    return FormlyAttributes;
}());
export { FormlyAttributes };
if (false) {
    /** @type {?} */
    FormlyAttributes.prototype.field;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.placeholder;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.tabindex;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.readonly;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FormlyAttributes.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,