import { CommonModule } from '@angular/common';
import { Injectable, InjectionToken, Component, Input, NgModule, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional, Directive, HostListener, ElementRef, Renderer2, EventEmitter, Output, ViewContainerRef, ViewChild, Attribute, ComponentFactoryResolver, SkipSelf, defineInjectable, inject } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { debounceTime, map, tap } from 'rxjs/operators';
import { AbstractControl, FormArray, FormGroup, NgForm, FormGroupDirective, Validators, FormControl } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} formId
 * @param {?} field
 * @param {?} index
 * @return {?}
 */
function getFieldId(formId, field, index) {
    if (field.id)
        return field.id;
    /** @type {?} */
    let type = field.type;
    if (!type && field.template)
        type = 'template';
    return [formId, type, field.key, index].join('_');
}
/**
 * @param {?} field
 * @return {?}
 */
function getKeyPath(field) {
    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
    if (!((/** @type {?} */ (field)))['_formlyKeyPath'] || ((/** @type {?} */ (field)))['_formlyKeyPath'].key !== field.key) {
        /** @type {?} */
        let keyPath = [];
        if (field.key) {
            /* Also allow for an array key, hence the type check  */
            /** @type {?} */
            let pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;
            for (let pathElement of pathElements) {
                if (typeof pathElement === 'string') {
                    /* replace paths of the form names[2] by names.2, cfr. angular formly */
                    pathElement = pathElement.replace(/\[(\w+)\]/g, '.$1');
                    keyPath = keyPath.concat(pathElement.split('.'));
                }
                else {
                    keyPath.push(pathElement);
                }
            }
            for (let i = 0; i < keyPath.length; i++) {
                /** @type {?} */
                let pathElement = keyPath[i];
                if (typeof pathElement === 'string' && /^\d+$/.test(pathElement)) {
                    keyPath[i] = parseInt(pathElement);
                }
            }
        }
        ((/** @type {?} */ (field)))['_formlyKeyPath'] = {
            key: field.key,
            path: keyPath,
        };
    }
    return ((/** @type {?} */ (field)))['_formlyKeyPath'].path.slice(0);
}
/** @type {?} */
const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
/**
 * @param {?} model
 * @param {?} path
 * @param {?} value
 * @return {?}
 */
function assignModelValue(model, path, value) {
    if (typeof path === 'string') {
        path = getKeyPath({ key: path });
    }
    if (path.length > 1) {
        /** @type {?} */
        const e = path.shift();
        if (!model[e] || !isObject(model[e])) {
            model[e] = typeof path[0] === 'string' ? {} : [];
        }
        assignModelValue(model[e], path, value);
    }
    else {
        model[path[0]] = value;
    }
}
/**
 * @param {?} field
 * @return {?}
 */
function getFieldValue(field) {
    /** @type {?} */
    const paths = getKeyPath(field);
    /** @type {?} */
    let model = field.parent.model;
    while (model && paths.length > 0) {
        /** @type {?} */
        const e = paths.shift();
        model = model[e];
    }
    return model;
}
/**
 * @param {?} dest
 * @param {...?} args
 * @return {?}
 */
function reverseDeepMerge(dest, ...args) {
    args.forEach(src => {
        for (let srcArg in src) {
            if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {
                if (isFunction(src[srcArg])) {
                    dest[srcArg] = src[srcArg];
                }
                else {
                    dest[srcArg] = clone(src[srcArg]);
                }
            }
            else if (objAndSameType(dest[srcArg], src[srcArg])) {
                reverseDeepMerge(dest[srcArg], src[srcArg]);
            }
        }
    });
    return dest;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNullOrUndefined(value) {
    return value === undefined || value === null;
}
/**
 * @param {?} value
 * @return {?}
 */
function isUndefined(value) {
    return value === undefined;
}
/**
 * @param {?} value
 * @return {?}
 */
function isBlankString(value) {
    return value === '';
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof (value) === 'function';
}
/**
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
function objAndSameType(obj1, obj2) {
    return isObject(obj1) && isObject(obj2)
        && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)
        && !(Array.isArray(obj1) || Array.isArray(obj2));
}
/**
 * @param {?} x
 * @return {?}
 */
function isObject(x) {
    return x != null && typeof x === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
function clone(value) {
    if (!isObject(value) || value instanceof RegExp || value instanceof Observable || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity) {
        return value;
    }
    if (value instanceof AbstractControl) {
        return null;
    }
    if (Object.prototype.toString.call(value) === '[object Date]') {
        return new Date(value.getTime());
    }
    if (Array.isArray(value)) {
        return value.slice(0).map(v => clone(v));
    }
    value = Object.assign({}, value);
    Object.keys(value).forEach(k => value[k] = clone(value[k]));
    return value;
}
/**
 * @param {?} form
 * @param {?} key
 * @return {?}
 */
function removeFieldControl(form, key) {
    if (form instanceof FormArray) {
        form.removeAt((/** @type {?} */ (key)));
    }
    else if (form instanceof FormGroup) {
        form.removeControl(`${key}`);
    }
}
/**
 * @param {?} field
 * @param {?} prop
 * @param {?} defaultValue
 * @return {?}
 */
function defineHiddenProp(field, prop, defaultValue) {
    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });
    field[prop] = defaultValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');
/**
 * Maintains list of formly field directive types. This can be used to register new field templates.
 */
class FormlyConfig {
    constructor() {
        this.types = {};
        this.validators = {};
        this.wrappers = {};
        this.messages = {};
        this.templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        this.extras = {
            fieldTransform: undefined,
            showError: function (field) {
                return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));
            },
        };
        this.extensions = {};
    }
    /**
     * @param {?} config
     * @return {?}
     */
    addConfig(config) {
        if (config.types) {
            config.types.forEach(type => this.setType(type));
        }
        if (config.validators) {
            config.validators.forEach(validator => this.setValidator(validator));
        }
        if (config.wrappers) {
            config.wrappers.forEach(wrapper => this.setWrapper(wrapper));
        }
        if (config.manipulators) {
            config.manipulators.forEach(manipulator => this.setManipulator(manipulator));
        }
        if (config.validationMessages) {
            config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));
        }
        if (config.extensions) {
            config.extensions.forEach(c => this.extensions[c.name] = c.extension);
        }
        if (config.extras) {
            this.extras = Object.assign({}, this.extras, config.extras);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setType(options) {
        if (Array.isArray(options)) {
            options.forEach((option) => this.setType(option));
        }
        else {
            if (!this.types[options.name]) {
                this.types[options.name] = (/** @type {?} */ ({}));
            }
            this.types[options.name].component = options.component;
            this.types[options.name].name = options.name;
            this.types[options.name].extends = options.extends;
            this.types[options.name].defaultOptions = options.defaultOptions;
            if (options.wrappers) {
                options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));
            }
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getType(name) {
        if (!this.types[name]) {
            throw new Error(`[Formly Error] There is no type by the name of "${name}"`);
        }
        this.mergeExtendedType(name);
        return this.types[name];
    }
    /**
     * @param {?=} field
     * @return {?}
     */
    getMergedField(field = {}) {
        /** @type {?} */
        const type = this.getType(field.type);
        if (type.defaultOptions) {
            reverseDeepMerge(field, type.defaultOptions);
        }
        /** @type {?} */
        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;
        if (extendDefaults) {
            reverseDeepMerge(field, extendDefaults);
        }
        if (field && field.optionsTypes) {
            field.optionsTypes.forEach(option => {
                /** @type {?} */
                const defaultOptions = this.getType(option).defaultOptions;
                if (defaultOptions) {
                    reverseDeepMerge(field, defaultOptions);
                }
            });
        }
        this.createComponentInstance(field);
        /** @type {?} */
        const componentRef = ((/** @type {?} */ (field)))._componentFactory.componentRef;
        if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {
            reverseDeepMerge(field, componentRef.instance.defaultOptions);
        }
        if (!field.wrappers && type.wrappers) {
            field.wrappers = [...type.wrappers];
        }
    }
    /**
     * @param {?=} field
     * @return {?}
     */
    createComponentInstance(field = {}) {
        if (!field.type || field._componentFactory && field.type === field._componentFactory.type) {
            return;
        }
        /** @type {?} */
        const type = this.getType(field.type);
        /** @type {?} */
        const _componentFactoryResolver = ((/** @type {?} */ (field.parent.options)))._componentFactoryResolver;
        defineHiddenProp(field, '_componentFactory', {
            type: field.type,
            component: type.component,
            componentRef: _componentFactoryResolver
                ? _componentFactoryResolver.resolveComponentFactory(type.component).create(_componentFactoryResolver._ngModule.injector)
                : null,
        });
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setWrapper(options) {
        this.wrappers[options.name] = options;
        if (options.types) {
            options.types.forEach((type) => {
                this.setTypeWrapper(type, options.name);
            });
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getWrapper(name) {
        if (!this.wrappers[name]) {
            throw new Error(`[Formly Error] There is no wrapper by the name of "${name}"`);
        }
        return this.wrappers[name];
    }
    /**
     * @param {?} type
     * @param {?} name
     * @return {?}
     */
    setTypeWrapper(type, name) {
        if (!this.types[type]) {
            this.types[type] = (/** @type {?} */ ({}));
        }
        if (!this.types[type].wrappers) {
            this.types[type].wrappers = [];
        }
        if (this.types[type].wrappers.indexOf(name) === -1) {
            this.types[type].wrappers.push(name);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setValidator(options) {
        this.validators[options.name] = options;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getValidator(name) {
        if (!this.validators[name]) {
            throw new Error(`[Formly Error] There is no validator by the name of "${name}"`);
        }
        return this.validators[name];
    }
    /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    addValidatorMessage(name, message) {
        this.messages[name] = message;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getValidatorMessage(name) {
        return this.messages[name];
    }
    /**
     * @param {?} manipulator
     * @return {?}
     */
    setManipulator(manipulator) {
        new manipulator.class()[manipulator.method](this);
    }
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    mergeExtendedType(name) {
        if (!this.types[name].extends) {
            return;
        }
        /** @type {?} */
        const extendedType = this.getType(this.types[name].extends);
        if (!this.types[name].component) {
            this.types[name].component = extendedType.component;
        }
        if (!this.types[name].wrappers) {
            this.types[name].wrappers = extendedType.wrappers;
        }
    }
}
FormlyConfig.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ FormlyConfig.ngInjectableDef = defineInjectable({ factory: function FormlyConfig_Factory() { return new FormlyConfig(); }, token: FormlyConfig, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFormBuilder {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @param {?} formControl
     * @param {?=} fieldGroup
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    buildForm(formControl, fieldGroup = [], model, options) {
        this._buildForm({ fieldGroup, model, formControl, options });
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    _buildForm(field) {
        this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));
        this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));
        if (field.fieldGroup) {
            field.fieldGroup.forEach((f) => this._buildForm(f));
        }
        this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));
    }
    /**
     * @private
     * @return {?}
     */
    getExtensions() {
        return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);
    }
}
FormlyFormBuilder.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
FormlyFormBuilder.ctorParameters = () => [
    { type: FormlyConfig }
];
/** @nocollapse */ FormlyFormBuilder.ngInjectableDef = defineInjectable({ factory: function FormlyFormBuilder_Factory() { return new FormlyFormBuilder(inject(FormlyConfig)); }, token: FormlyFormBuilder, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyForm {
    /**
     * @param {?} formlyBuilder
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     * @param {?} parentForm
     * @param {?} parentFormGroup
     * @param {?} parentFormlyForm
     */
    constructor(formlyBuilder, formlyConfig, componentFactoryResolver, parentForm, parentFormGroup, parentFormlyForm) {
        this.formlyBuilder = formlyBuilder;
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.parentFormlyForm = parentFormlyForm;
        this.model = {};
        this.form = new FormGroup({});
        this.fields = [];
        this.modelChange = new EventEmitter();
        /**
         * \@internal
         */
        this.isRoot = true;
        this.modelChangeSubs = [];
        this.enableCheckExprDebounce = false;
        this.checkExpressionChange$ = this.modelChange.pipe(debounceTime(this.enableCheckExprDebounce ? 100 : 0), tap(() => {
            this.enableCheckExprDebounce = true;
            this.checkExpressionChange();
            this.enableCheckExprDebounce = false;
        })).subscribe();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.checkExpressionChange();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.fields || this.fields.length === 0 || !this.isRoot) {
            return;
        }
        if (changes.fields || changes.form || changes.model) {
            this.model = this.model || {};
            this.form = this.form || (new FormGroup({}));
            this.setOptions();
            this.clearModelSubscriptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.trackModelChanges(this.fields);
            this.options.updateInitialValue();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearModelSubscriptions();
        this.checkExpressionChange$.unsubscribe();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeModel(event) {
        assignModelValue(this.model, event.key, event.value);
        this.modelChange.emit(this.model);
    }
    /**
     * @return {?}
     */
    setOptions() {
        this.options = this.options || {};
        this.options.formState = this.options.formState || {};
        if (!this.options.showError) {
            this.options.showError = this.formlyConfig.extras.showError;
        }
        if (!this.options.fieldChanges) {
            this.options.fieldChanges = new Subject();
        }
        if (!this.options.resetModel) {
            this.options.resetModel = (model) => {
                model = isNullOrUndefined(model) ? this.initialModel : model;
                if (this.model) {
                    Object.keys(this.model).forEach(k => delete this.model[k]);
                    Object.assign(this.model, model || {});
                }
                ((/** @type {?} */ (this.options)))._buildForm();
                // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
                // but only when the current component is a root one.
                if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {
                    this.options.parentForm.resetForm(model);
                }
                else {
                    this.form.reset(model);
                }
            };
        }
        if (!this.options.parentForm) {
            this.options.parentForm = this.parentFormGroup || this.parentForm;
        }
        if (this.options.parentForm) {
            /** @type {?} */
            let submitted = this.options.parentForm.submitted;
            Object.defineProperty(this.options.parentForm, 'submitted', {
                get: () => submitted,
                set: value => {
                    submitted = value;
                    ((/** @type {?} */ (this.options)))._markForCheck({
                        fieldGroup: this.fields,
                        model: this.model,
                        formControl: this.form,
                        options: this.options,
                    });
                },
            });
        }
        if (!this.options.updateInitialValue) {
            this.options.updateInitialValue = () => this.initialModel = reverseDeepMerge({}, this.model);
        }
        if (!((/** @type {?} */ (this.options)))._buildForm) {
            ((/** @type {?} */ (this.options)))._buildForm = () => {
                this.clearModelSubscriptions();
                this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
                this.trackModelChanges(this.fields);
            };
        }
        if (!((/** @type {?} */ (this.options)))._markForCheck) {
            ((/** @type {?} */ (this.options)))._markForCheck = (field) => {
                if (field._componentRefs) {
                    field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());
                }
                if (field.fieldGroup) {
                    field.fieldGroup.forEach(f => ((/** @type {?} */ (this.options)))._markForCheck(f));
                }
            };
        }
        if (!((/** @type {?} */ (this.options)))._componentFactoryResolver) {
            ((/** @type {?} */ (this.options)))._componentFactoryResolver = this.componentFactoryResolver;
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkExpressionChange() {
        if (this.isRoot && ((/** @type {?} */ (this.options)))._checkField) {
            ((/** @type {?} */ (this.options)))._checkField({
                fieldGroup: this.fields,
                model: this.model,
                formControl: this.form,
                options: this.options,
            });
        }
    }
    /**
     * @private
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    trackModelChanges(fields, rootKey = []) {
        fields.forEach(field => {
            if (field.key && field.type && !field.fieldGroup) {
                /** @type {?} */
                const valueChanges = field.formControl.valueChanges.pipe(field.modelOptions.debounce && field.modelOptions.debounce.default
                    ? debounceTime(field.modelOptions.debounce.default)
                    : tap(() => { }), map(value => {
                    if (field.parsers && field.parsers.length > 0) {
                        field.parsers.forEach(parserFn => value = parserFn(value));
                    }
                    return value;
                }), tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })));
                this.modelChangeSubs.push(valueChanges.subscribe());
            }
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    clearModelSubscriptions() {
        this.modelChangeSubs.forEach(sub => sub.unsubscribe());
        this.modelChangeSubs = [];
    }
}
FormlyForm.decorators = [
    { type: Component, args: [{
                selector: 'formly-form',
                template: `
    <formly-field *ngFor="let field of fields"
      hide-deprecation
      [form]="field.form"
      [options]="field.options"
      [model]="field.model"
      [field]="field">
    </formly-field>
    <ng-content></ng-content>
  `
            }] }
];
/** @nocollapse */
FormlyForm.ctorParameters = () => [
    { type: FormlyFormBuilder },
    { type: FormlyConfig },
    { type: ComponentFactoryResolver },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: FormlyForm, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
FormlyForm.propDecorators = {
    model: [{ type: Input }],
    form: [{ type: Input }],
    fields: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    isRoot: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyField {
    /**
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     * @param {?} hideDeprecation
     */
    constructor(formlyConfig, componentFactoryResolver, 
    // tslint:disable-next-line
    hideDeprecation) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.className = '';
        this.warnDeprecation = false;
        this.modelChange = new EventEmitter();
        this.warnDeprecation = hideDeprecation === null;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    set form(form) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @return {?}
     */
    get componentRefs() {
        if (!((/** @type {?} */ (this.field)))._componentRefs) {
            defineHiddenProp(this.field, '_componentRefs', []);
        }
        return ((/** @type {?} */ (this.field)))._componentRefs;
    }
    /**
     * @param {?} refs
     * @return {?}
     */
    set componentRefs(refs) {
        ((/** @type {?} */ (this.field)))._componentRefs = refs;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.triggerHook('afterContentInit');
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.triggerHook('afterContentChecked');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.triggerHook('afterViewInit');
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.triggerHook('afterViewChecked');
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.triggerHook('doCheck');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.triggerHook('onInit');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.field) {
            this.renderField(this.field, this.containerRef);
        }
        this.triggerHook('onChanges', changes);
        this.componentRefs.forEach(ref => {
            Object.assign(ref.instance, { field: this.field });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.triggerHook('onDestroy');
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
    }
    /**
     * @private
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    renderField(field, containerRef) {
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
        /** @type {?} */
        const wrappers = (/** @type {?} */ ((field.wrappers || []).map(wrapperName => this.formlyConfig.getWrapper(wrapperName))));
        [...wrappers, Object.assign({}, this.formlyConfig.getType(field.type), { componentFactory: ((/** @type {?} */ (field)))._componentFactory })].forEach(({ component, componentRef }) => {
            /** @type {?} */
            const ref = componentRef ? componentRef : containerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(component));
            Object.assign(ref.instance, { field });
            this.componentRefs.push(ref);
            containerRef = ref.instance.fieldComponent;
        });
    }
    /**
     * @private
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    triggerHook(name, changes) {
        if (this.field.hooks && this.field.hooks[name]) {
            if (!changes || changes.field) {
                this.field.hooks[name](this.field);
            }
        }
        if (this.field.lifecycle && this.field.lifecycle[name]) {
            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);
        }
    }
}
FormlyField.decorators = [
    { type: Component, args: [{
                selector: 'formly-field',
                template: `<ng-template #container></ng-template>`,
                host: {
                    '[style.display]': 'field.hide ? "none":""',
                    '[class]': 'field.className? field.className : className',
                }
            }] }
];
/** @nocollapse */
FormlyField.ctorParameters = () => [
    { type: FormlyConfig },
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }
];
FormlyField.propDecorators = {
    field: [{ type: Input }],
    className: [{ type: Input, args: ['class',] }],
    model: [{ type: Input }],
    form: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyAttributes {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        this.field.focus = true;
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        this.field.focus = false;
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    }
    /**
     * @return {?}
     */
    get to() {
        return this.field.templateOptions || {};
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.field) {
            /** @type {?} */
            const fieldChanges = changes.field;
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                this.setAttributes(this.to.attributes);
                Object.defineProperty(this.to, 'attributes', {
                    get: () => this.to.__attributes__,
                    set: attributes => this.setAttributes(attributes),
                    enumerable: true,
                    configurable: true,
                });
            }
            if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    }
    /**
     * We need to re-evaluate all the attributes on every change detection cycle, because
     * by using a HostBinding we run into certain edge cases. This means that whatever logic
     * is in here has to be super lean or we risk seriously damaging or destroying the performance.
     *
     * Formly issue: https://github.com/formly-js/ngx-formly/issues/1317
     * Material issue: https://github.com/angular/material2/issues/14024
     * @return {?}
     */
    ngDoCheck() {
        if (this.placeholder !== this.to.placeholder) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'placeholder', this.to.placeholder);
            this.placeholder = this.to.placeholder;
        }
        if (this.tabindex !== this.to.tabindex) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'tabindex', `${this.to.tabindex || 0}`);
            this.tabindex = this.to.tabindex;
        }
        if (this.readonly !== this.to.readonly) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'readonly', `${this.to.readonly}`);
            this.readonly = this.to.readonly;
        }
    }
    /**
     * @private
     * @param {?} attributes
     * @return {?}
     */
    setAttributes(attributes) {
        if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {
            Object.keys(this.to.__attributes__).forEach(name => this.renderer.removeAttribute(this.elementRef.nativeElement, name));
        }
        this.to.__attributes__ = attributes;
        Object.keys(attributes).forEach(name => this.renderer.setAttribute(this.elementRef.nativeElement, name, (/** @type {?} */ (attributes[name]))));
    }
}
FormlyAttributes.decorators = [
    { type: Directive, args: [{
                selector: '[formlyAttributes]',
                host: {
                    '[attr.name]': 'field.name',
                    '[attr.step]': 'to.step',
                    '(keyup)': 'to.keyup && to.keyup(field, $event)',
                    '(keydown)': 'to.keydown && to.keydown(field, $event)',
                    '(click)': 'to.click && to.click(field, $event)',
                    '(change)': 'to.change && to.change(field, $event)',
                    '(keypress)': 'to.keypress && to.keypress(field, $event)',
                },
            },] }
];
/** @nocollapse */
FormlyAttributes.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
FormlyAttributes.propDecorators = {
    field: [{ type: Input, args: ['formlyAttributes',] }],
    onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['blur', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template F
 */
class FieldType {
    /**
     * @return {?}
     */
    get model() { return this.field.model; }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get form() { return (/** @type {?} */ (this.field.parent.formControl)); }
    /**
     * @param {?} form
     * @return {?}
     */
    set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get options() { return this.field.options; }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get key() { return this.field.key; }
    /**
     * @return {?}
     */
    get formControl() { return this.field.formControl; }
    /**
     * @return {?}
     */
    get to() { return this.field.templateOptions || {}; }
    /**
     * @return {?}
     */
    get showError() { return this.options.showError(this); }
    /**
     * @return {?}
     */
    get id() { return this.field.id; }
    /**
     * @return {?}
     */
    get formState() { return this.options.formState || {}; }
}
FieldType.propDecorators = {
    field: [{ type: Input }],
    model: [{ type: Input }],
    form: [{ type: Input }],
    options: [{ type: Input }]
};
/**
 * @deprecated use `FieldType` instead
 * @abstract
 */
class Field extends FieldType {
    constructor() {
        super();
        console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template F
 */
class FieldArrayType extends FieldType {
    // tslint:disable-next-line
    /**
     * @param {?} builder
     */
    constructor(builder) {
        super();
    }
    /**
     * @param {?=} i
     * @param {?=} initialModel
     * @return {?}
     */
    add(i, initialModel) {
        i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;
        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
        ((/** @type {?} */ (this.options)))._buildForm();
    }
    /**
     * @param {?} i
     * @return {?}
     */
    remove(i) {
        this.model.splice(i, 1);
        ((/** @type {?} */ (this.options)))._buildForm();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template F
 */
class FieldWrapper extends FieldType {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyGroup extends FieldType {
}
FormlyGroup.decorators = [
    { type: Component, args: [{
                selector: 'formly-group',
                template: `
    <formly-form
      [fields]="field.fieldGroup"
      [isRoot]="false"
      [model]="field.model"
      [form]="field.formControl"
      [options]="options"
      [ngClass]="field.fieldGroupClassName">
      <ng-content></ng-content>
    </formly-form>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyValidationMessage {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @return {?}
     */
    get errorMessage() {
        /** @type {?} */
        const fieldForm = this.field.formControl;
        for (let error in fieldForm.errors) {
            if (fieldForm.errors.hasOwnProperty(error)) {
                /** @type {?} */
                let message = this.formlyConfig.getValidatorMessage(error);
                if (isObject(fieldForm.errors[error])) {
                    if (fieldForm.errors[error].errorPath) {
                        return;
                    }
                    if (fieldForm.errors[error].message) {
                        message = fieldForm.errors[error].message;
                    }
                }
                if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {
                    message = this.field.validation.messages[error];
                }
                if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {
                    message = this.field.validators[error].message;
                }
                if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {
                    message = this.field.asyncValidators[error].message;
                }
                if (typeof message === 'function') {
                    return message(fieldForm.errors[error], this.field);
                }
                return message;
            }
        }
    }
}
FormlyValidationMessage.decorators = [
    { type: Component, args: [{
                selector: 'formly-validation-message',
                template: `{{ errorMessage }}`
            }] }
];
/** @nocollapse */
FormlyValidationMessage.ctorParameters = () => [
    { type: FormlyConfig }
];
FormlyValidationMessage.propDecorators = {
    field: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyTemplateType extends FieldType {
}
FormlyTemplateType.decorators = [
    { type: Component, args: [{
                selector: 'formly-template',
                template: `<div [innerHtml]="field.template"></div>`
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
function evalStringExpression(expression, argNames) {
    try {
        return (/** @type {?} */ (Function(...argNames, `return ${expression};`)));
    }
    catch (error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
function evalExpressionValueSetter(expression, argNames) {
    try {
        return (/** @type {?} */ (Function(...argNames, `${expression} = expressionValue;`)));
    }
    catch (error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} thisArg
 * @param {?} argVal
 * @return {?}
 */
function evalExpression(expression, thisArg, argVal) {
    if (expression instanceof Function) {
        return expression.apply(thisArg, argVal);
    }
    else {
        return expression ? true : false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class FieldExpressionExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    prePopulate(field) {
        if (field.parent || field.options._checkField) {
            return;
        }
        field.options._checkField = (f, ignoreCache) => this._checkField(f, ignoreCache);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        if (!field.parent || field._expressionProperties) {
            return;
        }
        // cache built expression
        defineHiddenProp(field, '_expressionProperties', {});
        if (field.expressionProperties) {
            for (const key in field.expressionProperties) {
                /** @type {?} */
                const expressionProperty = field.expressionProperties[key];
                /** @type {?} */
                const expressionValueSetter = evalExpressionValueSetter(`field.${key}`, ['expressionValue', 'model', 'field']);
                if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {
                    field._expressionProperties[key] = {
                        expression: this._evalExpression(expressionProperty, field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')
                            ? () => field.parent.templateOptions.disabled
                            : undefined),
                        expressionValueSetter,
                    };
                    if (key === 'templateOptions.disabled') {
                        Object.defineProperty(field._expressionProperties[key], 'expressionValue', {
                            get: () => field.templateOptions.disabled,
                            set: () => { },
                            enumerable: true,
                            configurable: true,
                        });
                    }
                }
                else if (expressionProperty instanceof Observable) {
                    /** @type {?} */
                    const subscription = ((/** @type {?} */ (expressionProperty))).pipe(tap(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field]))).subscribe();
                    /** @type {?} */
                    const onDestroy = field.hooks.onDestroy;
                    field.hooks.onDestroy = (field) => {
                        onDestroy && onDestroy(field);
                        subscription.unsubscribe();
                    };
                }
            }
        }
        if (field.hideExpression || field.parent.hideExpression) {
            // delete hide value in order to force re-evaluate it in FormlyFormExpression.
            delete field.hide;
            field.hideExpression = this._evalExpression(field.hideExpression, field.parent && field.parent.hideExpression ? () => field.parent.hide : undefined);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    postPopulate(field) {
        if (field.parent) {
            return;
        }
        field.options._checkField(field, true);
    }
    /**
     * @private
     * @param {?} expression
     * @param {?=} parentExpression
     * @return {?}
     */
    _evalExpression(expression, parentExpression) {
        expression = expression || (() => false);
        if (typeof expression === 'string') {
            expression = evalStringExpression(expression, ['model', 'formState']);
        }
        return parentExpression
            ? (model, formState) => parentExpression() || expression(model, formState)
            : expression;
    }
    /**
     * @private
     * @param {?} field
     * @param {?=} ignoreCache
     * @return {?}
     */
    _checkField(field, ignoreCache = false) {
        /** @type {?} */
        let markForCheck = false;
        field.fieldGroup.forEach(f => {
            this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);
            this.checkFieldVisibilityChange(f, ignoreCache) && (markForCheck = true);
            if (f.fieldGroup && f.fieldGroup.length > 0) {
                this._checkField(f, ignoreCache);
            }
        });
        if (markForCheck && field.options && field.options._markForCheck) {
            field.options._markForCheck(field);
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    checkFieldExpressionChange(field, ignoreCache) {
        if (!field || !field._expressionProperties) {
            return false;
        }
        /** @type {?} */
        let markForCheck = false;
        /** @type {?} */
        const expressionProperties = field._expressionProperties;
        /** @type {?} */
        const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);
        for (const key in expressionProperties) {
            /** @type {?} */
            let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState]);
            if (key === 'templateOptions.disabled') {
                expressionValue = !!expressionValue;
            }
            if (ignoreCache || (expressionProperties[key].expressionValue !== expressionValue
                && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue)))) {
                markForCheck = true;
                expressionProperties[key].expressionValue = expressionValue;
                evalExpression(expressionProperties[key].expressionValueSetter, { field }, [expressionValue, field.model, field]);
                if (key.indexOf('model.') === 0) {
                    /** @type {?} */
                    const path = key.replace(/^model\./, '');
                    /** @type {?} */
                    const control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);
                    if (control
                        && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                        && control.value !== expressionValue) {
                        control.patchValue(expressionValue);
                    }
                }
                if (validators.indexOf(key) !== -1 && field.formControl) {
                    field.formControl.updateValueAndValidity({ emitEvent: false });
                }
            }
        }
        return markForCheck;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    checkFieldVisibilityChange(field, ignoreCache) {
        if (!field || isNullOrUndefined(field.hideExpression)) {
            return false;
        }
        /** @type {?} */
        const hideExpressionResult = !!evalExpression(field.hideExpression, { field }, [field.model, field.options.formState]);
        /** @type {?} */
        let markForCheck = false;
        if (hideExpressionResult !== field.hide || ignoreCache) {
            markForCheck = true;
            // toggle hide
            field.hide = hideExpressionResult;
            field.templateOptions.hidden = hideExpressionResult;
            if (field.formControl && field.key) {
                /** @type {?} */
                const parent = this.fieldParentFormControl(field);
                if (parent) {
                    /** @type {?} */
                    const control = parent.get(`${this.fieldKey(field)}`);
                    if (hideExpressionResult === true && control) {
                        removeFieldControl(parent, this.fieldKey(field));
                    }
                    else if (hideExpressionResult === false && !control) {
                        this.addFieldControl(parent, field);
                    }
                }
            }
            if (field.options.fieldChanges) {
                field.options.fieldChanges.next((/** @type {?} */ ({ field: field, type: 'hidden', value: hideExpressionResult })));
            }
        }
        return markForCheck;
    }
    /**
     * @private
     * @param {?} parent
     * @param {?} field
     * @return {?}
     */
    addFieldControl(parent, field) {
        /** @type {?} */
        const fieldModel = getFieldValue(field);
        if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
            && field.formControl.value !== fieldModel) {
            field.formControl.patchValue(fieldModel, { emitEvent: false });
        }
        if (parent instanceof FormArray) {
            parent.push(field.formControl);
        }
        else if (parent instanceof FormGroup) {
            parent.addControl(`${this.fieldKey(field)}`, field.formControl);
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    fieldParentFormControl(field) {
        /** @type {?} */
        const paths = getKeyPath(field);
        paths.pop(); // remove last path
        return (/** @type {?} */ ((paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl)));
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    fieldKey(field) {
        return getKeyPath(field).pop();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class FieldValidationExtension {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        this.initFieldValidation(field);
        this.initFieldAsyncValidation(field);
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldValidation(field) {
        if (field._validators) {
            return;
        }
        defineHiddenProp(field, '_validators', []);
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            for (const validatorName in field.validators) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    let validator = field.validators[validatorName];
                    /** @type {?} */
                    let errorPath;
                    /** @type {?} */
                    let message;
                    if (isObject(validator)) {
                        errorPath = validator.errorPath;
                        message = validator.message;
                        validator = validator.expression;
                    }
                    field._validators.push((control) => {
                        /** @type {?} */
                        const isValid = validator(control, field);
                        if (errorPath && field.formControl && field.formControl.get(errorPath)) {
                            if (!isValid) {
                                field.formControl.get(errorPath).setErrors(Object.assign({}, (field.formControl.get(errorPath).errors || {}), { [validatorName]: { message } }));
                            }
                            else {
                                /** @type {?} */
                                const errors = (field.formControl.get(errorPath).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    field.validators.validation
                        .forEach((validator) => field._validators.push(this.wrapNgValidatorFn(field, validator)));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldAsyncValidation(field) {
        if (field._asyncValidators) {
            return;
        }
        defineHiddenProp(field, '_asyncValidators', []);
        if (field.asyncValidators) {
            for (const validatorName in field.asyncValidators) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    let validator = field.asyncValidators[validatorName];
                    if (isObject(validator)) {
                        validator = validator.expression;
                    }
                    field._asyncValidators.push((control) => new Promise((resolve) => {
                        return validator(control, field).then((result) => {
                            resolve(result ? null : { [validatorName]: true });
                        });
                    }));
                }
                else {
                    if (!Array.isArray(field.asyncValidators.validation)) {
                        field.asyncValidators.validation = [field.asyncValidators.validation];
                    }
                    field.asyncValidators.validation
                        .forEach((validator) => field._asyncValidators.push((/** @type {?} */ (this.wrapNgValidatorFn(field, validator)))));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initPredefinedFieldValidation(field) {
        FORMLY_VALIDATORS
            .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))
            .forEach((opt) => {
            field._validators.push((control) => {
                /** @type {?} */
                const value = field.templateOptions[opt];
                if (value === false) {
                    return null;
                }
                switch (opt) {
                    case 'required':
                        return Validators.required(control);
                    case 'pattern':
                        return Validators.pattern(value)(control);
                    case 'minLength':
                        return Validators.minLength(value)(control);
                    case 'maxLength':
                        return Validators.maxLength(value)(control);
                    case 'min':
                        return Validators.min(value)(control);
                    case 'max':
                        return Validators.max(value)(control);
                }
            });
        });
    }
    /**
     * @private
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    wrapNgValidatorFn(field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return (control) => ((/** @type {?} */ (validator)))(control, field);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class FieldFormExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        if (field.key && field.type) {
            /** @type {?} */
            const paths = getKeyPath({ key: field.key });
            /** @type {?} */
            let rootForm = (/** @type {?} */ (field.parent.formControl));
            /** @type {?} */
            let rootModel = field.fieldGroup ? { [paths[0]]: field.model } : field.model;
            paths.forEach((path, index) => {
                // FormGroup/FormArray only allow string value for path
                /** @type {?} */
                const formPath = path.toString();
                // is last item
                if (index === paths.length - 1) {
                    this.addFormControl(rootForm, field, rootModel, formPath);
                }
                else {
                    if (!rootModel[path]) {
                        rootModel[path] = typeof path === 'string' ? {} : [];
                    }
                    this.addFormControl(rootForm, { key: formPath, fieldGroup: [], modelOptions: {}, templateOptions: {} }, rootModel, formPath);
                    rootForm = (/** @type {?} */ (rootForm.get(formPath)));
                    rootModel = rootModel[path];
                }
            });
        }
        if (field.fieldGroup && !field.formControl) {
            field.formControl = field.parent.formControl;
        }
    }
    /**
     * @private
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    addFormControl(form, field, model, path) {
        /** @type {?} */
        const abstractControlOptions = (/** @type {?} */ ({
            validators: field._validators,
            asyncValidators: field._asyncValidators,
            updateOn: field.modelOptions.updateOn,
        }));
        /** @type {?} */
        let control;
        if (field.formControl instanceof AbstractControl || form.get((/** @type {?} */ (path)))) {
            control = field.formControl || form.get((/** @type {?} */ (path)));
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
            if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {
                if (abstractControlOptions.validators) {
                    control.setValidators(abstractControlOptions.validators);
                }
                if (abstractControlOptions.asyncValidators) {
                    control.setAsyncValidators(abstractControlOptions.asyncValidators);
                }
                control.updateValueAndValidity();
            }
        }
        else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {
            /** @type {?} */
            const component = field._componentFactory.component;
            console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);
            control = component.createControl(model[path], field);
        }
        else if (field.fieldGroup && !field.fieldArray) {
            control = new FormGroup({}, abstractControlOptions);
        }
        else if (field.fieldArray) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: () => !field.formControl.enabled,
                set: (value) => value ? field.formControl.disable() : field.formControl.enable(),
                enumerable: true,
                configurable: true,
            });
        }
        if (field) {
            field.formControl = control;
        }
        if (form instanceof FormArray) {
            if (form.at((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
        else {
            if (form.get((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class CoreExtension {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
        this.formId = 0;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    prePopulate(field) {
        this.formlyConfig.createComponentInstance(field);
        this.getFieldComponentInstance(field).prePopulate();
        if (field.parent) {
            return;
        }
        /** @type {?} */
        const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {
            if (fieldTransform) {
                console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);
                /** @type {?} */
                const fieldGroup = fieldTransform(field.fieldGroup, field.model, (/** @type {?} */ (field.formControl)), field.options);
                if (!fieldGroup) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        this.initFieldOptions(field);
        this.getFieldComponentInstance(field).onPopulate();
        if (field.fieldGroup) {
            field.fieldGroup.forEach((f, index) => {
                Object.defineProperty(f, 'parent', { get: () => field, configurable: true });
                Object.defineProperty(f, 'index', { get: () => index, configurable: true });
                this.formId++;
            });
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    postPopulate(field) {
        this.getFieldComponentInstance(field).postPopulate();
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldOptions(field) {
        /** @type {?} */
        const root = (/** @type {?} */ (field.parent));
        if (!root) {
            return;
        }
        Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });
        Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });
        Object.defineProperty(field, 'model', {
            get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,
            configurable: true,
        });
        field.id = getFieldId(`formly_${this.formId}`, field, field['index']);
        field.templateOptions = field.templateOptions || {};
        field.modelOptions = field.modelOptions || {};
        field.hooks = field.hooks || {};
        if (field.lifecycle) {
            console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);
        }
        if (field.type && field.key) {
            field.templateOptions = Object.assign({
                label: '',
                placeholder: '',
                focus: false,
            }, field.templateOptions);
        }
        if (field.template && field.type !== 'formly-template') {
            if (field.type) {
                console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);
            }
            field.type = 'formly-template';
        }
        if (field.type) {
            this.formlyConfig.getMergedField(field);
        }
        if (field.key && isUndefined(field.defaultValue) && (field.fieldGroup || field.fieldArray)) {
            field.defaultValue = field.fieldArray ? [] : {};
        }
        if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
            assignModelValue(root.model, field.key, field.defaultValue);
        }
        this.initFieldWrappers(field);
        if (field.fieldArray) {
            this.initFieldArray(field);
        }
        if (!field.type && field.fieldGroup) {
            field.type = 'formly-group';
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldArray(field) {
        field.fieldGroup = field.fieldGroup || [];
        if (field.fieldGroup.length > field.model.length) {
            for (let i = field.fieldGroup.length; i >= field.model.length; --i) {
                removeFieldControl((/** @type {?} */ (field.formControl)), i);
                field.fieldGroup.splice(i, 1);
            }
        }
        for (let i = field.fieldGroup.length; i < field.model.length; i++) {
            /** @type {?} */
            const f = Object.assign({}, clone(field.fieldArray), { key: `${i}` });
            field.fieldGroup.push(f);
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldWrappers(field) {
        field.wrappers = field.wrappers || [];
        /** @type {?} */
        const fieldTemplateManipulators = Object.assign({ preWrapper: [], postWrapper: [] }, (field.templateOptions.templateManipulators || {}));
        field.wrappers = [
            ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),
            ...fieldTemplateManipulators.preWrapper.map(m => m(field)),
            ...field.wrappers,
            ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),
            ...fieldTemplateManipulators.postWrapper.map(m => m(field)),
        ].filter((el, i, a) => el && i === a.indexOf(el));
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    getFieldComponentInstance(field) {
        /** @type {?} */
        let instance = {};
        if (field._componentFactory && field._componentFactory.componentRef) {
            instance = field._componentFactory.componentRef.instance;
        }
        return {
            prePopulate: () => instance.prePopulate && instance.prePopulate(field),
            onPopulate: () => instance.onPopulate && instance.onPopulate(field),
            postPopulate: () => instance.postPopulate && instance.postPopulate(field),
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} formlyConfig
 * @return {?}
 */
function defaultFormlyConfig(formlyConfig) {
    return {
        types: [
            { name: 'formly-group', component: FormlyGroup },
            { name: 'formly-template', component: FormlyTemplateType },
        ],
        extensions: [
            { name: 'core', extension: new CoreExtension(formlyConfig) },
            { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },
            { name: 'field-form', extension: new FieldFormExtension() },
            { name: 'field-expression', extension: new FieldExpressionExtension() },
        ],
    };
}
class FormlyModule {
    /**
     * @param {?} configService
     * @param {?=} configs
     */
    constructor(configService, configs = []) {
        if (!configs) {
            return;
        }
        configs.forEach(config => configService.addConfig(config));
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            ngModule: FormlyModule,
            providers: [
                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },
                { provide: FORMLY_CONFIG, useValue: config, multi: true },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
                FormlyConfig,
                FormlyFormBuilder,
            ],
        };
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forChild(config = {}) {
        return {
            ngModule: FormlyModule,
            providers: [
                { provide: FORMLY_CONFIG, useValue: config, multi: true },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
            ],
        };
    }
}
FormlyModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FormlyForm,
                    FormlyField,
                    FormlyAttributes,
                    FormlyGroup,
                    FormlyValidationMessage,
                    FormlyTemplateType,
                ],
                entryComponents: [FormlyGroup, FormlyTemplateType],
                exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],
                imports: [CommonModule],
            },] }
];
/** @nocollapse */
FormlyModule.ctorParameters = () => [
    { type: FormlyConfig },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [FORMLY_CONFIG,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyForm, FormlyField, FormlyAttributes, FormlyConfig, FormlyFormBuilder, FieldType, Field, FieldArrayType, FieldWrapper, FormlyModule, defineHiddenProp as ɵdefineHiddenProp, FormlyGroup as ɵc, defaultFormlyConfig as ɵb, CoreExtension as ɵf, FieldExpressionExtension as ɵi, FieldFormExtension as ɵh, FieldValidationExtension as ɵg, FORMLY_CONFIG as ɵa, FormlyTemplateType as ɵe, FormlyValidationMessage as ɵd };

//# sourceMappingURL=ngx-formly-core.js.map