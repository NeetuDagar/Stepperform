/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { FormlyWrapperLabel } from '../wrappers/label';
import { FormlyWrapperFieldset } from '../wrappers/fieldset';
import { FormlyWrapperDescription, FormlyWrapperValidationMessages } from '../wrappers/wrappers';
export class TemplateFieldset {
    /**
     * @param {?} fc
     * @return {?}
     */
    run(fc) {
        fc.templateManipulators.preWrapper.push((field) => {
            if (['label', 'fieldset', 'description', 'validation-message'].some(w => field.wrappers.indexOf(w) !== -1)) {
                console.warn(`The following wrappers ('label', 'fieldset', 'description', 'validation-message') are depecated, rely on 'form-field' wrapper instead`);
            }
            const /** @type {?} */ formFieldIndex = field.wrappers.indexOf('form-field');
            if (formFieldIndex !== -1
                && (fc.getWrapper('label').component !== FormlyWrapperLabel
                    || fc.getWrapper('fieldset').component !== FormlyWrapperFieldset
                    || fc.getWrapper('description').component !== FormlyWrapperDescription
                    || fc.getWrapper('validation-message').component !== FormlyWrapperValidationMessages)) {
                field.wrappers[formFieldIndex] = 'fieldset';
                if (field.type !== 'checkbox') {
                    field.wrappers.splice(formFieldIndex, 0, 'label');
                }
                console.warn(`overriding the following wrappers ('label', 'fieldset', 'description', 'validation-message') is deprecated, override 'form-field' wrapper instead`);
            }
            return '';
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzZXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9ib290c3RyYXAvIiwic291cmNlcyI6WyJsaWIvcnVuL2ZpZWxkc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVqRyxNQUFNOzs7OztJQUNKLEdBQUcsQ0FBQyxFQUFnQjtRQUNsQixFQUFFLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRTtZQUNuRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNHLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUlBQXVJLENBQUMsQ0FBQzthQUN2SjtZQUVELHVCQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1RCxFQUFFLENBQUMsQ0FDRCxjQUFjLEtBQUssQ0FBQyxDQUFDO21CQUNsQixDQUNELEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxLQUFLLGtCQUFrQjt1QkFDcEQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLEtBQUsscUJBQXFCO3VCQUM3RCxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsS0FBSyx3QkFBd0I7dUJBQ25FLEVBQUUsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLEtBQUssK0JBQStCLENBRXhGLENBQUMsQ0FBQyxDQUFDO2dCQUNELEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM1QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQzlCLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQ25EO2dCQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsbUpBQW1KLENBQUMsQ0FBQzthQUNuSztZQUVELE1BQU0sQ0FBQyxFQUFFLENBQUM7U0FDWCxDQUFDLENBQUM7S0FDSjtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcsIEZvcm1seUNvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5V3JhcHBlckxhYmVsIH0gZnJvbSAnLi4vd3JhcHBlcnMvbGFiZWwnO1xuaW1wb3J0IHsgRm9ybWx5V3JhcHBlckZpZWxkc2V0IH0gZnJvbSAnLi4vd3JhcHBlcnMvZmllbGRzZXQnO1xuaW1wb3J0IHsgRm9ybWx5V3JhcHBlckRlc2NyaXB0aW9uLCBGb3JtbHlXcmFwcGVyVmFsaWRhdGlvbk1lc3NhZ2VzIH0gZnJvbSAnLi4vd3JhcHBlcnMvd3JhcHBlcnMnO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVGaWVsZHNldCB7XG4gIHJ1bihmYzogRm9ybWx5Q29uZmlnKSB7XG4gICAgZmMudGVtcGxhdGVNYW5pcHVsYXRvcnMucHJlV3JhcHBlci5wdXNoKChmaWVsZDogRm9ybWx5RmllbGRDb25maWcpID0+IHtcbiAgICAgIGlmIChbJ2xhYmVsJywgJ2ZpZWxkc2V0JywgJ2Rlc2NyaXB0aW9uJywgJ3ZhbGlkYXRpb24tbWVzc2FnZSddLnNvbWUodyA9PiBmaWVsZC53cmFwcGVycy5pbmRleE9mKHcpICE9PSAtMSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBUaGUgZm9sbG93aW5nIHdyYXBwZXJzICgnbGFiZWwnLCAnZmllbGRzZXQnLCAnZGVzY3JpcHRpb24nLCAndmFsaWRhdGlvbi1tZXNzYWdlJykgYXJlIGRlcGVjYXRlZCwgcmVseSBvbiAnZm9ybS1maWVsZCcgd3JhcHBlciBpbnN0ZWFkYCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZvcm1GaWVsZEluZGV4ID0gZmllbGQud3JhcHBlcnMuaW5kZXhPZignZm9ybS1maWVsZCcpO1xuICAgICAgaWYgKFxuICAgICAgICBmb3JtRmllbGRJbmRleCAhPT0gLTFcbiAgICAgICAgJiYgKFxuICAgICAgICAgIGZjLmdldFdyYXBwZXIoJ2xhYmVsJykuY29tcG9uZW50ICE9PSBGb3JtbHlXcmFwcGVyTGFiZWxcbiAgICAgICAgICB8fCBmYy5nZXRXcmFwcGVyKCdmaWVsZHNldCcpLmNvbXBvbmVudCAhPT0gRm9ybWx5V3JhcHBlckZpZWxkc2V0XG4gICAgICAgICAgfHwgZmMuZ2V0V3JhcHBlcignZGVzY3JpcHRpb24nKS5jb21wb25lbnQgIT09IEZvcm1seVdyYXBwZXJEZXNjcmlwdGlvblxuICAgICAgICAgIHx8IGZjLmdldFdyYXBwZXIoJ3ZhbGlkYXRpb24tbWVzc2FnZScpLmNvbXBvbmVudCAhPT0gRm9ybWx5V3JhcHBlclZhbGlkYXRpb25NZXNzYWdlc1xuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgZmllbGQud3JhcHBlcnNbZm9ybUZpZWxkSW5kZXhdID0gJ2ZpZWxkc2V0JztcbiAgICAgICAgaWYgKGZpZWxkLnR5cGUgIT09ICdjaGVja2JveCcpIHtcbiAgICAgICAgICBmaWVsZC53cmFwcGVycy5zcGxpY2UoZm9ybUZpZWxkSW5kZXgsIDAsICdsYWJlbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS53YXJuKGBvdmVycmlkaW5nIHRoZSBmb2xsb3dpbmcgd3JhcHBlcnMgKCdsYWJlbCcsICdmaWVsZHNldCcsICdkZXNjcmlwdGlvbicsICd2YWxpZGF0aW9uLW1lc3NhZ2UnKSBpcyBkZXByZWNhdGVkLCBvdmVycmlkZSAnZm9ybS1maWVsZCcgd3JhcHBlciBpbnN0ZWFkYCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfVxufVxuIl19