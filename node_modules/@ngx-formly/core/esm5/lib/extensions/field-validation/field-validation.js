/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Validators } from '@angular/forms';
import { isObject, FORMLY_VALIDATORS, defineHiddenProp } from '../../utils';
/**
 * \@experimental
 */
var /**
 * \@experimental
 */
FieldValidationExtension = /** @class */ (function () {
    function FieldValidationExtension(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FieldValidationExtension.prototype.onPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.initFieldValidation(field);
        this.initFieldAsyncValidation(field);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FieldValidationExtension.prototype.initFieldValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (field._validators) {
            return;
        }
        defineHiddenProp(field, '_validators', []);
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            var _loop_1 = function (validatorName) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    var validator_1 = field.validators[validatorName];
                    /** @type {?} */
                    var errorPath_1;
                    /** @type {?} */
                    var message_1;
                    if (isObject(validator_1)) {
                        errorPath_1 = validator_1.errorPath;
                        message_1 = validator_1.message;
                        validator_1 = validator_1.expression;
                    }
                    field._validators.push(function (control) {
                        var _a, _b;
                        /** @type {?} */
                        var isValid = validator_1(control, field);
                        if (errorPath_1 && field.formControl && field.formControl.get(errorPath_1)) {
                            if (!isValid) {
                                field.formControl.get(errorPath_1).setErrors(tslib_1.__assign({}, (field.formControl.get(errorPath_1).errors || {}), (_a = {}, _a[validatorName] = { message: message_1 }, _a)));
                            }
                            else {
                                /** @type {?} */
                                var errors = (field.formControl.get(errorPath_1).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath_1).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : (_b = {}, _b[validatorName] = errorPath_1 ? { errorPath: errorPath_1 } : true, _b);
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    field.validators.validation
                        .forEach(function (validator) { return field._validators.push(_this.wrapNgValidatorFn(field, validator)); });
                }
            };
            for (var validatorName in field.validators) {
                _loop_1(validatorName);
            }
        }
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FieldValidationExtension.prototype.initFieldAsyncValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (field._asyncValidators) {
            return;
        }
        defineHiddenProp(field, '_asyncValidators', []);
        if (field.asyncValidators) {
            var _loop_2 = function (validatorName) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    var validator_2 = field.asyncValidators[validatorName];
                    if (isObject(validator_2)) {
                        validator_2 = validator_2.expression;
                    }
                    field._asyncValidators.push(function (control) { return new Promise(function (resolve) {
                        return validator_2(control, field).then(function (result) {
                            var _a;
                            resolve(result ? null : (_a = {}, _a[validatorName] = true, _a));
                        });
                    }); });
                }
                else {
                    if (!Array.isArray(field.asyncValidators.validation)) {
                        field.asyncValidators.validation = [field.asyncValidators.validation];
                    }
                    field.asyncValidators.validation
                        .forEach(function (validator) { return field._asyncValidators.push((/** @type {?} */ (_this.wrapNgValidatorFn(field, validator)))); });
                }
            };
            for (var validatorName in field.asyncValidators) {
                _loop_2(validatorName);
            }
        }
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FieldValidationExtension.prototype.initPredefinedFieldValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        FORMLY_VALIDATORS
            .filter(function (opt) { return (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties["templateOptions." + opt]); })
            .forEach(function (opt) {
            field._validators.push(function (control) {
                /** @type {?} */
                var value = field.templateOptions[opt];
                if (value === false) {
                    return null;
                }
                switch (opt) {
                    case 'required':
                        return Validators.required(control);
                    case 'pattern':
                        return Validators.pattern(value)(control);
                    case 'minLength':
                        return Validators.minLength(value)(control);
                    case 'maxLength':
                        return Validators.maxLength(value)(control);
                    case 'min':
                        return Validators.min(value)(control);
                    case 'max':
                        return Validators.max(value)(control);
                }
            });
        });
    };
    /**
     * @private
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    FieldValidationExtension.prototype.wrapNgValidatorFn = /**
     * @private
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    function (field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return function (control) { return ((/** @type {?} */ (validator)))(control, field); };
    };
    return FieldValidationExtension;
}());
/**
 * \@experimental
 */
export { FieldValidationExtension };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FieldValidationExtension.prototype.formlyConfig;
}
//# sourceMappingURL=data:application/json;base64,