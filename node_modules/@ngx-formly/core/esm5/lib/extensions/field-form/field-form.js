/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AbstractControl, FormGroup, FormArray, FormControl } from '@angular/forms';
import { getKeyPath, isNullOrUndefined } from '../../utils';
/**
 * \@experimental
 */
var /**
 * \@experimental
 */
FieldFormExtension = /** @class */ (function () {
    function FieldFormExtension() {
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FieldFormExtension.prototype.onPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        var _a;
        if (field.key && field.type) {
            /** @type {?} */
            var paths_1 = getKeyPath({ key: field.key });
            /** @type {?} */
            var rootForm_1 = (/** @type {?} */ (field.parent.formControl));
            /** @type {?} */
            var rootModel_1 = field.fieldGroup ? (_a = {}, _a[paths_1[0]] = field.model, _a) : field.model;
            paths_1.forEach(function (path, index) {
                // FormGroup/FormArray only allow string value for path
                /** @type {?} */
                var formPath = path.toString();
                // is last item
                if (index === paths_1.length - 1) {
                    _this.addFormControl(rootForm_1, field, rootModel_1, formPath);
                }
                else {
                    if (!rootModel_1[path]) {
                        rootModel_1[path] = typeof path === 'string' ? {} : [];
                    }
                    _this.addFormControl(rootForm_1, { key: formPath, fieldGroup: [], modelOptions: {}, templateOptions: {} }, rootModel_1, formPath);
                    rootForm_1 = (/** @type {?} */ (rootForm_1.get(formPath)));
                    rootModel_1 = rootModel_1[path];
                }
            });
        }
        if (field.fieldGroup && !field.formControl) {
            field.formControl = field.parent.formControl;
        }
    };
    /**
     * @private
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    FieldFormExtension.prototype.addFormControl = /**
     * @private
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    function (form, field, model, path) {
        /** @type {?} */
        var abstractControlOptions = (/** @type {?} */ ({
            validators: field._validators,
            asyncValidators: field._asyncValidators,
            updateOn: field.modelOptions.updateOn,
        }));
        /** @type {?} */
        var control;
        if (field.formControl instanceof AbstractControl || form.get((/** @type {?} */ (path)))) {
            control = field.formControl || form.get((/** @type {?} */ (path)));
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
            if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {
                if (abstractControlOptions.validators) {
                    control.setValidators(abstractControlOptions.validators);
                }
                if (abstractControlOptions.asyncValidators) {
                    control.setAsyncValidators(abstractControlOptions.asyncValidators);
                }
                control.updateValueAndValidity();
            }
        }
        else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {
            /** @type {?} */
            var component = field._componentFactory.component;
            console.warn("NgxFormly: '" + component.name + "::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.");
            control = component.createControl(model[path], field);
        }
        else if (field.fieldGroup && !field.fieldArray) {
            control = new FormGroup({}, abstractControlOptions);
        }
        else if (field.fieldArray) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: function () { return !field.formControl.enabled; },
                set: function (value) { return value ? field.formControl.disable() : field.formControl.enable(); },
                enumerable: true,
                configurable: true,
            });
        }
        if (field) {
            field.formControl = control;
        }
        if (form instanceof FormArray) {
            if (form.at((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
        else {
            if (form.get((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
    };
    return FieldFormExtension;
}());
/**
 * \@experimental
 */
export { FieldFormExtension };
//# sourceMappingURL=data:application/json;base64,