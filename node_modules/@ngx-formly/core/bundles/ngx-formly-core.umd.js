(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/core', ['exports', '@angular/common', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/forms'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].core = {}),global.ng.common,global.ng.core,global.rxjs,global.rxjs.operators,global.ng.forms));
}(this, (function (exports,common,i0,rxjs,operators,forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} formId
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    function getFieldId(formId, field, index) {
        if (field.id)
            return field.id;
        /** @type {?} */
        var type = field.type;
        if (!type && field.template)
            type = 'template';
        return [formId, type, field.key, index].join('_');
    }
    /**
     * @param {?} field
     * @return {?}
     */
    function getKeyPath(field) {
        var e_1, _a;
        /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
        if (!(( /** @type {?} */(field)))['_formlyKeyPath'] || (( /** @type {?} */(field)))['_formlyKeyPath'].key !== field.key) {
            /** @type {?} */
            var keyPath = [];
            if (field.key) {
                /* Also allow for an array key, hence the type check  */
                /** @type {?} */
                var pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;
                try {
                    for (var pathElements_1 = __values(pathElements), pathElements_1_1 = pathElements_1.next(); !pathElements_1_1.done; pathElements_1_1 = pathElements_1.next()) {
                        var pathElement = pathElements_1_1.value;
                        if (typeof pathElement === 'string') {
                            /* replace paths of the form names[2] by names.2, cfr. angular formly */
                            pathElement = pathElement.replace(/\[(\w+)\]/g, '.$1');
                            keyPath = keyPath.concat(pathElement.split('.'));
                        }
                        else {
                            keyPath.push(pathElement);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (pathElements_1_1 && !pathElements_1_1.done && (_a = pathElements_1.return))
                            _a.call(pathElements_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                for (var i = 0; i < keyPath.length; i++) {
                    /** @type {?} */
                    var pathElement = keyPath[i];
                    if (typeof pathElement === 'string' && /^\d+$/.test(pathElement)) {
                        keyPath[i] = parseInt(pathElement);
                    }
                }
            }
            (( /** @type {?} */(field)))['_formlyKeyPath'] = {
                key: field.key,
                path: keyPath,
            };
        }
        return (( /** @type {?} */(field)))['_formlyKeyPath'].path.slice(0);
    }
    /** @type {?} */
    var FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
    /**
     * @param {?} model
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    function assignModelValue(model, path, value) {
        if (typeof path === 'string') {
            path = getKeyPath({ key: path });
        }
        if (path.length > 1) {
            /** @type {?} */
            var e = path.shift();
            if (!model[e] || !isObject(model[e])) {
                model[e] = typeof path[0] === 'string' ? {} : [];
            }
            assignModelValue(model[e], path, value);
        }
        else {
            model[path[0]] = value;
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    function getFieldValue(field) {
        /** @type {?} */
        var paths = getKeyPath(field);
        /** @type {?} */
        var model = field.parent.model;
        while (model && paths.length > 0) {
            /** @type {?} */
            var e = paths.shift();
            model = model[e];
        }
        return model;
    }
    /**
     * @param {?} dest
     * @param {...?} args
     * @return {?}
     */
    function reverseDeepMerge(dest) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        args.forEach(function (src) {
            for (var srcArg in src) {
                if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {
                    if (isFunction(src[srcArg])) {
                        dest[srcArg] = src[srcArg];
                    }
                    else {
                        dest[srcArg] = clone(src[srcArg]);
                    }
                }
                else if (objAndSameType(dest[srcArg], src[srcArg])) {
                    reverseDeepMerge(dest[srcArg], src[srcArg]);
                }
            }
        });
        return dest;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNullOrUndefined(value) {
        return value === undefined || value === null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isUndefined(value) {
        return value === undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isBlankString(value) {
        return value === '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof (value) === 'function';
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function objAndSameType(obj1, obj2) {
        return isObject(obj1) && isObject(obj2)
            && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)
            && !(Array.isArray(obj1) || Array.isArray(obj2));
    }
    /**
     * @param {?} x
     * @return {?}
     */
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function clone(value) {
        if (!isObject(value) || value instanceof RegExp || value instanceof rxjs.Observable || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity) {
            return value;
        }
        if (value instanceof forms.AbstractControl) {
            return null;
        }
        if (Object.prototype.toString.call(value) === '[object Date]') {
            return new Date(value.getTime());
        }
        if (Array.isArray(value)) {
            return value.slice(0).map(function (v) { return clone(v); });
        }
        value = Object.assign({}, value);
        Object.keys(value).forEach(function (k) { return value[k] = clone(value[k]); });
        return value;
    }
    /**
     * @param {?} form
     * @param {?} key
     * @return {?}
     */
    function removeFieldControl(form, key) {
        if (form instanceof forms.FormArray) {
            form.removeAt(( /** @type {?} */(key)));
        }
        else if (form instanceof forms.FormGroup) {
            form.removeControl("" + key);
        }
    }
    /**
     * @param {?} field
     * @param {?} prop
     * @param {?} defaultValue
     * @return {?}
     */
    function defineHiddenProp(field, prop, defaultValue) {
        Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });
        field[prop] = defaultValue;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FORMLY_CONFIG = new i0.InjectionToken('FORMLY_CONFIG');
    /**
     * Maintains list of formly field directive types. This can be used to register new field templates.
     */
    var FormlyConfig = /** @class */ (function () {
        function FormlyConfig() {
            this.types = {};
            this.validators = {};
            this.wrappers = {};
            this.messages = {};
            this.templateManipulators = {
                preWrapper: [],
                postWrapper: [],
            };
            this.extras = {
                fieldTransform: undefined,
                showError: function (field) {
                    return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));
                },
            };
            this.extensions = {};
        }
        /**
         * @param {?} config
         * @return {?}
         */
        FormlyConfig.prototype.addConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                if (config.types) {
                    config.types.forEach(function (type) { return _this.setType(type); });
                }
                if (config.validators) {
                    config.validators.forEach(function (validator) { return _this.setValidator(validator); });
                }
                if (config.wrappers) {
                    config.wrappers.forEach(function (wrapper) { return _this.setWrapper(wrapper); });
                }
                if (config.manipulators) {
                    config.manipulators.forEach(function (manipulator) { return _this.setManipulator(manipulator); });
                }
                if (config.validationMessages) {
                    config.validationMessages.forEach(function (validation) { return _this.addValidatorMessage(validation.name, validation.message); });
                }
                if (config.extensions) {
                    config.extensions.forEach(function (c) { return _this.extensions[c.name] = c.extension; });
                }
                if (config.extras) {
                    this.extras = __assign({}, this.extras, config.extras);
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyConfig.prototype.setType = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (Array.isArray(options)) {
                    options.forEach(function (option) { return _this.setType(option); });
                }
                else {
                    if (!this.types[options.name]) {
                        this.types[options.name] = ( /** @type {?} */({}));
                    }
                    this.types[options.name].component = options.component;
                    this.types[options.name].name = options.name;
                    this.types[options.name].extends = options.extends;
                    this.types[options.name].defaultOptions = options.defaultOptions;
                    if (options.wrappers) {
                        options.wrappers.forEach(function (wrapper) { return _this.setTypeWrapper(options.name, wrapper); });
                    }
                }
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getType = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.types[name]) {
                    throw new Error("[Formly Error] There is no type by the name of \"" + name + "\"");
                }
                this.mergeExtendedType(name);
                return this.types[name];
            };
        /**
         * @param {?=} field
         * @return {?}
         */
        FormlyConfig.prototype.getMergedField = /**
         * @param {?=} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                if (field === void 0) {
                    field = {};
                }
                /** @type {?} */
                var type = this.getType(field.type);
                if (type.defaultOptions) {
                    reverseDeepMerge(field, type.defaultOptions);
                }
                /** @type {?} */
                var extendDefaults = type.extends && this.getType(type.extends).defaultOptions;
                if (extendDefaults) {
                    reverseDeepMerge(field, extendDefaults);
                }
                if (field && field.optionsTypes) {
                    field.optionsTypes.forEach(function (option) {
                        /** @type {?} */
                        var defaultOptions = _this.getType(option).defaultOptions;
                        if (defaultOptions) {
                            reverseDeepMerge(field, defaultOptions);
                        }
                    });
                }
                this.createComponentInstance(field);
                /** @type {?} */
                var componentRef = (( /** @type {?} */(field)))._componentFactory.componentRef;
                if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {
                    reverseDeepMerge(field, componentRef.instance.defaultOptions);
                }
                if (!field.wrappers && type.wrappers) {
                    field.wrappers = __spread(type.wrappers);
                }
            };
        /**
         * @param {?=} field
         * @return {?}
         */
        FormlyConfig.prototype.createComponentInstance = /**
         * @param {?=} field
         * @return {?}
         */
            function (field) {
                if (field === void 0) {
                    field = {};
                }
                if (!field.type || field._componentFactory && field.type === field._componentFactory.type) {
                    return;
                }
                /** @type {?} */
                var type = this.getType(field.type);
                /** @type {?} */
                var _componentFactoryResolver = (( /** @type {?} */(field.parent.options)))._componentFactoryResolver;
                defineHiddenProp(field, '_componentFactory', {
                    type: field.type,
                    component: type.component,
                    componentRef: _componentFactoryResolver
                        ? _componentFactoryResolver.resolveComponentFactory(type.component).create(_componentFactoryResolver._ngModule.injector)
                        : null,
                });
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyConfig.prototype.setWrapper = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                this.wrappers[options.name] = options;
                if (options.types) {
                    options.types.forEach(function (type) {
                        _this.setTypeWrapper(type, options.name);
                    });
                }
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getWrapper = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.wrappers[name]) {
                    throw new Error("[Formly Error] There is no wrapper by the name of \"" + name + "\"");
                }
                return this.wrappers[name];
            };
        /**
         * @param {?} type
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.setTypeWrapper = /**
         * @param {?} type
         * @param {?} name
         * @return {?}
         */
            function (type, name) {
                if (!this.types[type]) {
                    this.types[type] = ( /** @type {?} */({}));
                }
                if (!this.types[type].wrappers) {
                    this.types[type].wrappers = [];
                }
                if (this.types[type].wrappers.indexOf(name) === -1) {
                    this.types[type].wrappers.push(name);
                }
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FormlyConfig.prototype.setValidator = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.validators[options.name] = options;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getValidator = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.validators[name]) {
                    throw new Error("[Formly Error] There is no validator by the name of \"" + name + "\"");
                }
                return this.validators[name];
            };
        /**
         * @param {?} name
         * @param {?} message
         * @return {?}
         */
        FormlyConfig.prototype.addValidatorMessage = /**
         * @param {?} name
         * @param {?} message
         * @return {?}
         */
            function (name, message) {
                this.messages[name] = message;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.getValidatorMessage = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.messages[name];
            };
        /**
         * @param {?} manipulator
         * @return {?}
         */
        FormlyConfig.prototype.setManipulator = /**
         * @param {?} manipulator
         * @return {?}
         */
            function (manipulator) {
                new manipulator.class()[manipulator.method](this);
            };
        /**
         * @private
         * @param {?} name
         * @return {?}
         */
        FormlyConfig.prototype.mergeExtendedType = /**
         * @private
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.types[name].extends) {
                    return;
                }
                /** @type {?} */
                var extendedType = this.getType(this.types[name].extends);
                if (!this.types[name].component) {
                    this.types[name].component = extendedType.component;
                }
                if (!this.types[name].wrappers) {
                    this.types[name].wrappers = extendedType.wrappers;
                }
            };
        FormlyConfig.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ FormlyConfig.ngInjectableDef = i0.defineInjectable({ factory: function FormlyConfig_Factory() { return new FormlyConfig(); }, token: FormlyConfig, providedIn: "root" });
        return FormlyConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFormBuilder = /** @class */ (function () {
        function FormlyFormBuilder(formlyConfig) {
            this.formlyConfig = formlyConfig;
        }
        /**
         * @param {?} formControl
         * @param {?=} fieldGroup
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
        FormlyFormBuilder.prototype.buildForm = /**
         * @param {?} formControl
         * @param {?=} fieldGroup
         * @param {?=} model
         * @param {?=} options
         * @return {?}
         */
            function (formControl, fieldGroup, model, options) {
                if (fieldGroup === void 0) {
                    fieldGroup = [];
                }
                this._buildForm({ fieldGroup: fieldGroup, model: model, formControl: formControl, options: options });
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        FormlyFormBuilder.prototype._buildForm = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                this.getExtensions().forEach(function (extension) { return extension.prePopulate && extension.prePopulate(field); });
                this.getExtensions().forEach(function (extension) { return extension.onPopulate && extension.onPopulate(field); });
                if (field.fieldGroup) {
                    field.fieldGroup.forEach(function (f) { return _this._buildForm(f); });
                }
                this.getExtensions().forEach(function (extension) { return extension.postPopulate && extension.postPopulate(field); });
            };
        /**
         * @private
         * @return {?}
         */
        FormlyFormBuilder.prototype.getExtensions = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.formlyConfig.extensions).map(function (name) { return _this.formlyConfig.extensions[name]; });
            };
        FormlyFormBuilder.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        FormlyFormBuilder.ctorParameters = function () {
            return [
                { type: FormlyConfig }
            ];
        };
        /** @nocollapse */ FormlyFormBuilder.ngInjectableDef = i0.defineInjectable({ factory: function FormlyFormBuilder_Factory() { return new FormlyFormBuilder(i0.inject(FormlyConfig)); }, token: FormlyFormBuilder, providedIn: "root" });
        return FormlyFormBuilder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyForm = /** @class */ (function () {
        function FormlyForm(formlyBuilder, formlyConfig, componentFactoryResolver, parentForm, parentFormGroup, parentFormlyForm) {
            var _this = this;
            this.formlyBuilder = formlyBuilder;
            this.formlyConfig = formlyConfig;
            this.componentFactoryResolver = componentFactoryResolver;
            this.parentForm = parentForm;
            this.parentFormGroup = parentFormGroup;
            this.parentFormlyForm = parentFormlyForm;
            this.model = {};
            this.form = new forms.FormGroup({});
            this.fields = [];
            this.modelChange = new i0.EventEmitter();
            /**
             * \@internal
             */
            this.isRoot = true;
            this.modelChangeSubs = [];
            this.enableCheckExprDebounce = false;
            this.checkExpressionChange$ = this.modelChange.pipe(operators.debounceTime(this.enableCheckExprDebounce ? 100 : 0), operators.tap(function () {
                _this.enableCheckExprDebounce = true;
                _this.checkExpressionChange();
                _this.enableCheckExprDebounce = false;
            })).subscribe();
        }
        /**
         * @return {?}
         */
        FormlyForm.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                this.checkExpressionChange();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FormlyForm.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.fields || this.fields.length === 0 || !this.isRoot) {
                    return;
                }
                if (changes.fields || changes.form || changes.model) {
                    this.model = this.model || {};
                    this.form = this.form || (new forms.FormGroup({}));
                    this.setOptions();
                    this.clearModelSubscriptions();
                    this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
                    this.trackModelChanges(this.fields);
                    this.options.updateInitialValue();
                }
            };
        /**
         * @return {?}
         */
        FormlyForm.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.clearModelSubscriptions();
                this.checkExpressionChange$.unsubscribe();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FormlyForm.prototype.changeModel = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                assignModelValue(this.model, event.key, event.value);
                this.modelChange.emit(this.model);
            };
        /**
         * @return {?}
         */
        FormlyForm.prototype.setOptions = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.options = this.options || {};
                this.options.formState = this.options.formState || {};
                if (!this.options.showError) {
                    this.options.showError = this.formlyConfig.extras.showError;
                }
                if (!this.options.fieldChanges) {
                    this.options.fieldChanges = new rxjs.Subject();
                }
                if (!this.options.resetModel) {
                    this.options.resetModel = function (model) {
                        model = isNullOrUndefined(model) ? _this.initialModel : model;
                        if (_this.model) {
                            Object.keys(_this.model).forEach(function (k) { return delete _this.model[k]; });
                            Object.assign(_this.model, model || {});
                        }
                        (( /** @type {?} */(_this.options)))._buildForm();
                        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
                        // but only when the current component is a root one.
                        if (!_this.parentFormlyForm && _this.options.parentForm && _this.options.parentForm.control === _this.form) {
                            _this.options.parentForm.resetForm(model);
                        }
                        else {
                            _this.form.reset(model);
                        }
                    };
                }
                if (!this.options.parentForm) {
                    this.options.parentForm = this.parentFormGroup || this.parentForm;
                }
                if (this.options.parentForm) {
                    /** @type {?} */
                    var submitted_1 = this.options.parentForm.submitted;
                    Object.defineProperty(this.options.parentForm, 'submitted', {
                        get: function () { return submitted_1; },
                        set: function (value) {
                            submitted_1 = value;
                            (( /** @type {?} */(_this.options)))._markForCheck({
                                fieldGroup: _this.fields,
                                model: _this.model,
                                formControl: _this.form,
                                options: _this.options,
                            });
                        },
                    });
                }
                if (!this.options.updateInitialValue) {
                    this.options.updateInitialValue = function () { return _this.initialModel = reverseDeepMerge({}, _this.model); };
                }
                if (!(( /** @type {?} */(this.options)))._buildForm) {
                    (( /** @type {?} */(this.options)))._buildForm = function () {
                        _this.clearModelSubscriptions();
                        _this.formlyBuilder.buildForm(_this.form, _this.fields, _this.model, _this.options);
                        _this.trackModelChanges(_this.fields);
                    };
                }
                if (!(( /** @type {?} */(this.options)))._markForCheck) {
                    (( /** @type {?} */(this.options)))._markForCheck = function (field) {
                        if (field._componentRefs) {
                            field._componentRefs.forEach(function (ref) { return ref.changeDetectorRef.markForCheck(); });
                        }
                        if (field.fieldGroup) {
                            field.fieldGroup.forEach(function (f) { return (( /** @type {?} */(_this.options)))._markForCheck(f); });
                        }
                    };
                }
                if (!(( /** @type {?} */(this.options)))._componentFactoryResolver) {
                    (( /** @type {?} */(this.options)))._componentFactoryResolver = this.componentFactoryResolver;
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormlyForm.prototype.checkExpressionChange = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.isRoot && (( /** @type {?} */(this.options)))._checkField) {
                    (( /** @type {?} */(this.options)))._checkField({
                        fieldGroup: this.fields,
                        model: this.model,
                        formControl: this.form,
                        options: this.options,
                    });
                }
            };
        /**
         * @private
         * @param {?} fields
         * @param {?=} rootKey
         * @return {?}
         */
        FormlyForm.prototype.trackModelChanges = /**
         * @private
         * @param {?} fields
         * @param {?=} rootKey
         * @return {?}
         */
            function (fields, rootKey) {
                var _this = this;
                if (rootKey === void 0) {
                    rootKey = [];
                }
                fields.forEach(function (field) {
                    if (field.key && field.type && !field.fieldGroup) {
                        /** @type {?} */
                        var valueChanges = field.formControl.valueChanges.pipe(field.modelOptions.debounce && field.modelOptions.debounce.default
                            ? operators.debounceTime(field.modelOptions.debounce.default)
                            : operators.tap(function () { }), operators.map(function (value) {
                            if (field.parsers && field.parsers.length > 0) {
                                field.parsers.forEach(function (parserFn) { return value = parserFn(value); });
                            }
                            return value;
                        }), operators.tap(function (value) { return _this.changeModel({ key: __spread(rootKey, [field.key]).join('.'), value: value }); }));
                        _this.modelChangeSubs.push(valueChanges.subscribe());
                    }
                    if (field.fieldGroup && field.fieldGroup.length > 0) {
                        _this.trackModelChanges(field.fieldGroup, field.key ? __spread(rootKey, [field.key]) : rootKey);
                    }
                });
            };
        /**
         * @private
         * @return {?}
         */
        FormlyForm.prototype.clearModelSubscriptions = /**
         * @private
         * @return {?}
         */
            function () {
                this.modelChangeSubs.forEach(function (sub) { return sub.unsubscribe(); });
                this.modelChangeSubs = [];
            };
        FormlyForm.decorators = [
            { type: i0.Component, args: [{
                        selector: 'formly-form',
                        template: "\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-content></ng-content>\n  "
                    }] }
        ];
        /** @nocollapse */
        FormlyForm.ctorParameters = function () {
            return [
                { type: FormlyFormBuilder },
                { type: FormlyConfig },
                { type: i0.ComponentFactoryResolver },
                { type: forms.NgForm, decorators: [{ type: i0.Optional }] },
                { type: forms.FormGroupDirective, decorators: [{ type: i0.Optional }] },
                { type: FormlyForm, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        FormlyForm.propDecorators = {
            model: [{ type: i0.Input }],
            form: [{ type: i0.Input }],
            fields: [{ type: i0.Input }],
            options: [{ type: i0.Input }],
            modelChange: [{ type: i0.Output }],
            isRoot: [{ type: i0.Input }]
        };
        return FormlyForm;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyField = /** @class */ (function () {
        function FormlyField(formlyConfig, componentFactoryResolver, 
        // tslint:disable-next-line
        hideDeprecation) {
            this.formlyConfig = formlyConfig;
            this.componentFactoryResolver = componentFactoryResolver;
            this.className = '';
            this.warnDeprecation = false;
            this.modelChange = new i0.EventEmitter();
            this.warnDeprecation = hideDeprecation === null;
        }
        Object.defineProperty(FormlyField.prototype, "model", {
            set: /**
             * @param {?} m
             * @return {?}
             */ function (m) {
                this.warnDeprecation && console.warn("NgxFormly: passing 'model' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyField.prototype, "form", {
            set: /**
             * @param {?} form
             * @return {?}
             */ function (form) {
                this.warnDeprecation && console.warn("NgxFormly: passing 'form' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyField.prototype, "options", {
            set: /**
             * @param {?} options
             * @return {?}
             */ function (options) {
                this.warnDeprecation && console.warn("NgxFormly: passing 'options' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormlyField.prototype, "componentRefs", {
            get: /**
             * @return {?}
             */ function () {
                if (!(( /** @type {?} */(this.field)))._componentRefs) {
                    defineHiddenProp(this.field, '_componentRefs', []);
                }
                return (( /** @type {?} */(this.field)))._componentRefs;
            },
            set: /**
             * @param {?} refs
             * @return {?}
             */ function (refs) {
                (( /** @type {?} */(this.field)))._componentRefs = refs;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.triggerHook('afterContentInit');
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                this.triggerHook('afterContentChecked');
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.triggerHook('afterViewInit');
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                this.triggerHook('afterViewChecked');
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                this.triggerHook('doCheck');
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.triggerHook('onInit');
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FormlyField.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (changes.field) {
                    this.renderField(this.field, this.containerRef);
                }
                this.triggerHook('onChanges', changes);
                this.componentRefs.forEach(function (ref) {
                    Object.assign(ref.instance, { field: _this.field });
                });
            };
        /**
         * @return {?}
         */
        FormlyField.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.triggerHook('onDestroy');
                this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
                this.componentRefs = [];
            };
        /**
         * @private
         * @param {?} field
         * @param {?} containerRef
         * @return {?}
         */
        FormlyField.prototype.renderField = /**
         * @private
         * @param {?} field
         * @param {?} containerRef
         * @return {?}
         */
            function (field, containerRef) {
                var _this = this;
                this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
                this.componentRefs = [];
                /** @type {?} */
                var wrappers = ( /** @type {?} */((field.wrappers || []).map(function (wrapperName) { return _this.formlyConfig.getWrapper(wrapperName); })));
                __spread(wrappers, [__assign({}, this.formlyConfig.getType(field.type), { componentFactory: (( /** @type {?} */(field)))._componentFactory })]).forEach(function (_a) {
                    var component = _a.component, componentRef = _a.componentRef;
                    /** @type {?} */
                    var ref = componentRef ? componentRef : containerRef.createComponent(_this.componentFactoryResolver.resolveComponentFactory(component));
                    Object.assign(ref.instance, { field: field });
                    _this.componentRefs.push(ref);
                    containerRef = ref.instance.fieldComponent;
                });
            };
        /**
         * @private
         * @param {?} name
         * @param {?=} changes
         * @return {?}
         */
        FormlyField.prototype.triggerHook = /**
         * @private
         * @param {?} name
         * @param {?=} changes
         * @return {?}
         */
            function (name, changes) {
                if (this.field.hooks && this.field.hooks[name]) {
                    if (!changes || changes.field) {
                        this.field.hooks[name](this.field);
                    }
                }
                if (this.field.lifecycle && this.field.lifecycle[name]) {
                    this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);
                }
            };
        FormlyField.decorators = [
            { type: i0.Component, args: [{
                        selector: 'formly-field',
                        template: "<ng-template #container></ng-template>",
                        host: {
                            '[style.display]': 'field.hide ? "none":""',
                            '[class]': 'field.className? field.className : className',
                        }
                    }] }
        ];
        /** @nocollapse */
        FormlyField.ctorParameters = function () {
            return [
                { type: FormlyConfig },
                { type: i0.ComponentFactoryResolver },
                { type: undefined, decorators: [{ type: i0.Attribute, args: ['hide-deprecation',] }] }
            ];
        };
        FormlyField.propDecorators = {
            field: [{ type: i0.Input }],
            className: [{ type: i0.Input, args: ['class',] }],
            model: [{ type: i0.Input }],
            form: [{ type: i0.Input }],
            options: [{ type: i0.Input }],
            modelChange: [{ type: i0.Output }],
            containerRef: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef },] }]
        };
        return FormlyField;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyAttributes = /** @class */ (function () {
        function FormlyAttributes(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        FormlyAttributes.prototype.onFocus = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.field.focus = true;
                if (this.to.focus) {
                    this.to.focus(this.field, $event);
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormlyAttributes.prototype.onBlur = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.field.focus = false;
                if (this.to.blur) {
                    this.to.blur(this.field, $event);
                }
            };
        Object.defineProperty(FormlyAttributes.prototype, "to", {
            get: /**
             * @return {?}
             */ function () {
                return this.field.templateOptions || {};
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        FormlyAttributes.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (changes.field) {
                    /** @type {?} */
                    var fieldChanges = changes.field;
                    this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
                    if (this.to && this.to.attributes) {
                        this.setAttributes(this.to.attributes);
                        Object.defineProperty(this.to, 'attributes', {
                            get: function () { return _this.to.__attributes__; },
                            set: function (attributes) { return _this.setAttributes(attributes); },
                            enumerable: true,
                            configurable: true,
                        });
                    }
                    if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
                    }
                }
            };
        /**
         * We need to re-evaluate all the attributes on every change detection cycle, because
         * by using a HostBinding we run into certain edge cases. This means that whatever logic
         * is in here has to be super lean or we risk seriously damaging or destroying the performance.
         *
         * Formly issue: https://github.com/formly-js/ngx-formly/issues/1317
         * Material issue: https://github.com/angular/material2/issues/14024
         */
        /**
         * We need to re-evaluate all the attributes on every change detection cycle, because
         * by using a HostBinding we run into certain edge cases. This means that whatever logic
         * is in here has to be super lean or we risk seriously damaging or destroying the performance.
         *
         * Formly issue: https://github.com/formly-js/ngx-formly/issues/1317
         * Material issue: https://github.com/angular/material2/issues/14024
         * @return {?}
         */
        FormlyAttributes.prototype.ngDoCheck = /**
         * We need to re-evaluate all the attributes on every change detection cycle, because
         * by using a HostBinding we run into certain edge cases. This means that whatever logic
         * is in here has to be super lean or we risk seriously damaging or destroying the performance.
         *
         * Formly issue: https://github.com/formly-js/ngx-formly/issues/1317
         * Material issue: https://github.com/angular/material2/issues/14024
         * @return {?}
         */
            function () {
                if (this.placeholder !== this.to.placeholder) {
                    this.renderer.setAttribute(this.elementRef.nativeElement, 'placeholder', this.to.placeholder);
                    this.placeholder = this.to.placeholder;
                }
                if (this.tabindex !== this.to.tabindex) {
                    this.renderer.setAttribute(this.elementRef.nativeElement, 'tabindex', "" + (this.to.tabindex || 0));
                    this.tabindex = this.to.tabindex;
                }
                if (this.readonly !== this.to.readonly) {
                    this.renderer.setAttribute(this.elementRef.nativeElement, 'readonly', "" + this.to.readonly);
                    this.readonly = this.to.readonly;
                }
            };
        /**
         * @private
         * @param {?} attributes
         * @return {?}
         */
        FormlyAttributes.prototype.setAttributes = /**
         * @private
         * @param {?} attributes
         * @return {?}
         */
            function (attributes) {
                var _this = this;
                if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {
                    Object.keys(this.to.__attributes__).forEach(function (name) { return _this.renderer.removeAttribute(_this.elementRef.nativeElement, name); });
                }
                this.to.__attributes__ = attributes;
                Object.keys(attributes).forEach(function (name) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, name, ( /** @type {?} */(attributes[name]))); });
            };
        FormlyAttributes.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[formlyAttributes]',
                        host: {
                            '[attr.name]': 'field.name',
                            '[attr.step]': 'to.step',
                            '(keyup)': 'to.keyup && to.keyup(field, $event)',
                            '(keydown)': 'to.keydown && to.keydown(field, $event)',
                            '(click)': 'to.click && to.click(field, $event)',
                            '(change)': 'to.change && to.change(field, $event)',
                            '(keypress)': 'to.keypress && to.keypress(field, $event)',
                        },
                    },] }
        ];
        /** @nocollapse */
        FormlyAttributes.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        FormlyAttributes.propDecorators = {
            field: [{ type: i0.Input, args: ['formlyAttributes',] }],
            onFocus: [{ type: i0.HostListener, args: ['focus', ['$event'],] }],
            onBlur: [{ type: i0.HostListener, args: ['blur', ['$event'],] }]
        };
        return FormlyAttributes;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template F
     */
    var FieldType = /** @class */ (function () {
        function FieldType() {
        }
        Object.defineProperty(FieldType.prototype, "model", {
            get: /**
             * @return {?}
             */ function () { return this.field.model; },
            set: /**
             * @param {?} m
             * @return {?}
             */ function (m) { console.warn("NgxFormly: passing 'model' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!"); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "form", {
            get: /**
             * @return {?}
             */ function () { return ( /** @type {?} */(this.field.parent.formControl)); },
            set: /**
             * @param {?} form
             * @return {?}
             */ function (form) { console.warn("NgxFormly: passing 'form' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!"); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "options", {
            get: /**
             * @return {?}
             */ function () { return this.field.options; },
            set: /**
             * @param {?} options
             * @return {?}
             */ function (options) { console.warn("NgxFormly: passing 'options' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!"); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "key", {
            get: /**
             * @return {?}
             */ function () { return this.field.key; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "formControl", {
            get: /**
             * @return {?}
             */ function () { return this.field.formControl; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "to", {
            get: /**
             * @return {?}
             */ function () { return this.field.templateOptions || {}; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "showError", {
            get: /**
             * @return {?}
             */ function () { return this.options.showError(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "id", {
            get: /**
             * @return {?}
             */ function () { return this.field.id; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FieldType.prototype, "formState", {
            get: /**
             * @return {?}
             */ function () { return this.options.formState || {}; },
            enumerable: true,
            configurable: true
        });
        FieldType.propDecorators = {
            field: [{ type: i0.Input }],
            model: [{ type: i0.Input }],
            form: [{ type: i0.Input }],
            options: [{ type: i0.Input }]
        };
        return FieldType;
    }());
    /**
     * @deprecated use `FieldType` instead
     * @abstract
     */
    var /**
     * @deprecated use `FieldType` instead
     * @abstract
     */ Field = /** @class */ (function (_super) {
        __extends(Field, _super);
        function Field() {
            var _this = _super.call(this) || this;
            console.warn("NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.");
            return _this;
        }
        return Field;
    }(FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template F
     */
    var /**
     * @abstract
     * @template F
     */ FieldArrayType = /** @class */ (function (_super) {
        __extends(FieldArrayType, _super);
        // tslint:disable-next-line
        function FieldArrayType(builder) {
            return _super.call(this) || this;
        }
        /**
         * @param {?=} i
         * @param {?=} initialModel
         * @return {?}
         */
        FieldArrayType.prototype.add = /**
         * @param {?=} i
         * @param {?=} initialModel
         * @return {?}
         */
            function (i, initialModel) {
                i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;
                this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
                (( /** @type {?} */(this.options)))._buildForm();
            };
        /**
         * @param {?} i
         * @return {?}
         */
        FieldArrayType.prototype.remove = /**
         * @param {?} i
         * @return {?}
         */
            function (i) {
                this.model.splice(i, 1);
                (( /** @type {?} */(this.options)))._buildForm();
            };
        return FieldArrayType;
    }(FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template F
     */
    var /**
     * @abstract
     * @template F
     */ FieldWrapper = /** @class */ (function (_super) {
        __extends(FieldWrapper, _super);
        function FieldWrapper() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FieldWrapper;
    }(FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyGroup = /** @class */ (function (_super) {
        __extends(FormlyGroup, _super);
        function FormlyGroup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyGroup.decorators = [
            { type: i0.Component, args: [{
                        selector: 'formly-group',
                        template: "\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"field.model\"\n      [form]=\"field.formControl\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  "
                    }] }
        ];
        return FormlyGroup;
    }(FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyValidationMessage = /** @class */ (function () {
        function FormlyValidationMessage(formlyConfig) {
            this.formlyConfig = formlyConfig;
        }
        Object.defineProperty(FormlyValidationMessage.prototype, "errorMessage", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var fieldForm = this.field.formControl;
                for (var error in fieldForm.errors) {
                    if (fieldForm.errors.hasOwnProperty(error)) {
                        /** @type {?} */
                        var message = this.formlyConfig.getValidatorMessage(error);
                        if (isObject(fieldForm.errors[error])) {
                            if (fieldForm.errors[error].errorPath) {
                                return;
                            }
                            if (fieldForm.errors[error].message) {
                                message = fieldForm.errors[error].message;
                            }
                        }
                        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {
                            message = this.field.validation.messages[error];
                        }
                        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {
                            message = this.field.validators[error].message;
                        }
                        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {
                            message = this.field.asyncValidators[error].message;
                        }
                        if (typeof message === 'function') {
                            return message(fieldForm.errors[error], this.field);
                        }
                        return message;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        FormlyValidationMessage.decorators = [
            { type: i0.Component, args: [{
                        selector: 'formly-validation-message',
                        template: "{{ errorMessage }}"
                    }] }
        ];
        /** @nocollapse */
        FormlyValidationMessage.ctorParameters = function () {
            return [
                { type: FormlyConfig }
            ];
        };
        FormlyValidationMessage.propDecorators = {
            field: [{ type: i0.Input }]
        };
        return FormlyValidationMessage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyTemplateType = /** @class */ (function (_super) {
        __extends(FormlyTemplateType, _super);
        function FormlyTemplateType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyTemplateType.decorators = [
            { type: i0.Component, args: [{
                        selector: 'formly-template',
                        template: "<div [innerHtml]=\"field.template\"></div>"
                    }] }
        ];
        return FormlyTemplateType;
    }(FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} expression
     * @param {?} argNames
     * @return {?}
     */
    function evalStringExpression(expression, argNames) {
        try {
            return ( /** @type {?} */(Function.apply(void 0, __spread(argNames, ["return " + expression + ";"]))));
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * @param {?} expression
     * @param {?} argNames
     * @return {?}
     */
    function evalExpressionValueSetter(expression, argNames) {
        try {
            return ( /** @type {?} */(Function.apply(void 0, __spread(argNames, [expression + " = expressionValue;"]))));
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * @param {?} expression
     * @param {?} thisArg
     * @param {?} argVal
     * @return {?}
     */
    function evalExpression(expression, thisArg, argVal) {
        if (expression instanceof Function) {
            return expression.apply(thisArg, argVal);
        }
        else {
            return expression ? true : false;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@experimental
     */
    var /**
     * \@experimental
     */ FieldExpressionExtension = /** @class */ (function () {
        function FieldExpressionExtension() {
        }
        /**
         * @param {?} field
         * @return {?}
         */
        FieldExpressionExtension.prototype.prePopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                if (field.parent || field.options._checkField) {
                    return;
                }
                field.options._checkField = function (f, ignoreCache) { return _this._checkField(f, ignoreCache); };
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FieldExpressionExtension.prototype.onPopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (!field.parent || field._expressionProperties) {
                    return;
                }
                // cache built expression
                defineHiddenProp(field, '_expressionProperties', {});
                if (field.expressionProperties) {
                    var _loop_1 = function (key) {
                        /** @type {?} */
                        var expressionProperty = field.expressionProperties[key];
                        /** @type {?} */
                        var expressionValueSetter = evalExpressionValueSetter("field." + key, ['expressionValue', 'model', 'field']);
                        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {
                            field._expressionProperties[key] = {
                                expression: this_1._evalExpression(expressionProperty, field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')
                                    ? function () { return field.parent.templateOptions.disabled; }
                                    : undefined),
                                expressionValueSetter: expressionValueSetter,
                            };
                            if (key === 'templateOptions.disabled') {
                                Object.defineProperty(field._expressionProperties[key], 'expressionValue', {
                                    get: function () { return field.templateOptions.disabled; },
                                    set: function () { },
                                    enumerable: true,
                                    configurable: true,
                                });
                            }
                        }
                        else if (expressionProperty instanceof rxjs.Observable) {
                            /** @type {?} */
                            var subscription_1 = (( /** @type {?} */(expressionProperty))).pipe(operators.tap(function (v) { return evalExpression(expressionValueSetter, { field: field }, [v, field.model, field]); })).subscribe();
                            /** @type {?} */
                            var onDestroy_1 = field.hooks.onDestroy;
                            field.hooks.onDestroy = function (field) {
                                onDestroy_1 && onDestroy_1(field);
                                subscription_1.unsubscribe();
                            };
                        }
                    };
                    var this_1 = this;
                    for (var key in field.expressionProperties) {
                        _loop_1(key);
                    }
                }
                if (field.hideExpression || field.parent.hideExpression) {
                    // delete hide value in order to force re-evaluate it in FormlyFormExpression.
                    delete field.hide;
                    field.hideExpression = this._evalExpression(field.hideExpression, field.parent && field.parent.hideExpression ? function () { return field.parent.hide; } : undefined);
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FieldExpressionExtension.prototype.postPopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (field.parent) {
                    return;
                }
                field.options._checkField(field, true);
            };
        /**
         * @private
         * @param {?} expression
         * @param {?=} parentExpression
         * @return {?}
         */
        FieldExpressionExtension.prototype._evalExpression = /**
         * @private
         * @param {?} expression
         * @param {?=} parentExpression
         * @return {?}
         */
            function (expression, parentExpression) {
                expression = expression || (function () { return false; });
                if (typeof expression === 'string') {
                    expression = evalStringExpression(expression, ['model', 'formState']);
                }
                return parentExpression
                    ? function (model, formState) { return parentExpression() || expression(model, formState); }
                    : expression;
            };
        /**
         * @private
         * @param {?} field
         * @param {?=} ignoreCache
         * @return {?}
         */
        FieldExpressionExtension.prototype._checkField = /**
         * @private
         * @param {?} field
         * @param {?=} ignoreCache
         * @return {?}
         */
            function (field, ignoreCache) {
                var _this = this;
                if (ignoreCache === void 0) {
                    ignoreCache = false;
                }
                /** @type {?} */
                var markForCheck = false;
                field.fieldGroup.forEach(function (f) {
                    _this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);
                    _this.checkFieldVisibilityChange(f, ignoreCache) && (markForCheck = true);
                    if (f.fieldGroup && f.fieldGroup.length > 0) {
                        _this._checkField(f, ignoreCache);
                    }
                });
                if (markForCheck && field.options && field.options._markForCheck) {
                    field.options._markForCheck(field);
                }
            };
        /**
         * @private
         * @param {?} field
         * @param {?} ignoreCache
         * @return {?}
         */
        FieldExpressionExtension.prototype.checkFieldExpressionChange = /**
         * @private
         * @param {?} field
         * @param {?} ignoreCache
         * @return {?}
         */
            function (field, ignoreCache) {
                if (!field || !field._expressionProperties) {
                    return false;
                }
                /** @type {?} */
                var markForCheck = false;
                /** @type {?} */
                var expressionProperties = field._expressionProperties;
                /** @type {?} */
                var validators = FORMLY_VALIDATORS.map(function (v) { return "templateOptions." + v; });
                for (var key in expressionProperties) {
                    /** @type {?} */
                    var expressionValue = evalExpression(expressionProperties[key].expression, { field: field }, [field.model, field.options.formState]);
                    if (key === 'templateOptions.disabled') {
                        expressionValue = !!expressionValue;
                    }
                    if (ignoreCache || (expressionProperties[key].expressionValue !== expressionValue
                        && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue)))) {
                        markForCheck = true;
                        expressionProperties[key].expressionValue = expressionValue;
                        evalExpression(expressionProperties[key].expressionValueSetter, { field: field }, [expressionValue, field.model, field]);
                        if (key.indexOf('model.') === 0) {
                            /** @type {?} */
                            var path = key.replace(/^model\./, '');
                            /** @type {?} */
                            var control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);
                            if (control
                                && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                                && control.value !== expressionValue) {
                                control.patchValue(expressionValue);
                            }
                        }
                        if (validators.indexOf(key) !== -1 && field.formControl) {
                            field.formControl.updateValueAndValidity({ emitEvent: false });
                        }
                    }
                }
                return markForCheck;
            };
        /**
         * @private
         * @param {?} field
         * @param {?} ignoreCache
         * @return {?}
         */
        FieldExpressionExtension.prototype.checkFieldVisibilityChange = /**
         * @private
         * @param {?} field
         * @param {?} ignoreCache
         * @return {?}
         */
            function (field, ignoreCache) {
                if (!field || isNullOrUndefined(field.hideExpression)) {
                    return false;
                }
                /** @type {?} */
                var hideExpressionResult = !!evalExpression(field.hideExpression, { field: field }, [field.model, field.options.formState]);
                /** @type {?} */
                var markForCheck = false;
                if (hideExpressionResult !== field.hide || ignoreCache) {
                    markForCheck = true;
                    // toggle hide
                    field.hide = hideExpressionResult;
                    field.templateOptions.hidden = hideExpressionResult;
                    if (field.formControl && field.key) {
                        /** @type {?} */
                        var parent_1 = this.fieldParentFormControl(field);
                        if (parent_1) {
                            /** @type {?} */
                            var control = parent_1.get("" + this.fieldKey(field));
                            if (hideExpressionResult === true && control) {
                                removeFieldControl(parent_1, this.fieldKey(field));
                            }
                            else if (hideExpressionResult === false && !control) {
                                this.addFieldControl(parent_1, field);
                            }
                        }
                    }
                    if (field.options.fieldChanges) {
                        field.options.fieldChanges.next(( /** @type {?} */({ field: field, type: 'hidden', value: hideExpressionResult })));
                    }
                }
                return markForCheck;
            };
        /**
         * @private
         * @param {?} parent
         * @param {?} field
         * @return {?}
         */
        FieldExpressionExtension.prototype.addFieldControl = /**
         * @private
         * @param {?} parent
         * @param {?} field
         * @return {?}
         */
            function (parent, field) {
                /** @type {?} */
                var fieldModel = getFieldValue(field);
                if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
                    && field.formControl.value !== fieldModel) {
                    field.formControl.patchValue(fieldModel, { emitEvent: false });
                }
                if (parent instanceof forms.FormArray) {
                    parent.push(field.formControl);
                }
                else if (parent instanceof forms.FormGroup) {
                    parent.addControl("" + this.fieldKey(field), field.formControl);
                }
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        FieldExpressionExtension.prototype.fieldParentFormControl = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                /** @type {?} */
                var paths = getKeyPath(field);
                paths.pop(); // remove last path
                return ( /** @type {?} */((paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl)));
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        FieldExpressionExtension.prototype.fieldKey = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                return getKeyPath(field).pop();
            };
        return FieldExpressionExtension;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@experimental
     */
    var /**
     * \@experimental
     */ FieldValidationExtension = /** @class */ (function () {
        function FieldValidationExtension(formlyConfig) {
            this.formlyConfig = formlyConfig;
        }
        /**
         * @param {?} field
         * @return {?}
         */
        FieldValidationExtension.prototype.onPopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                this.initFieldValidation(field);
                this.initFieldAsyncValidation(field);
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        FieldValidationExtension.prototype.initFieldValidation = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                if (field._validators) {
                    return;
                }
                defineHiddenProp(field, '_validators', []);
                this.initPredefinedFieldValidation(field);
                if (field.validators) {
                    var _loop_1 = function (validatorName) {
                        if (validatorName !== 'validation') {
                            /** @type {?} */
                            var validator_1 = field.validators[validatorName];
                            /** @type {?} */
                            var errorPath_1;
                            /** @type {?} */
                            var message_1;
                            if (isObject(validator_1)) {
                                errorPath_1 = validator_1.errorPath;
                                message_1 = validator_1.message;
                                validator_1 = validator_1.expression;
                            }
                            field._validators.push(function (control) {
                                var _a, _b;
                                /** @type {?} */
                                var isValid = validator_1(control, field);
                                if (errorPath_1 && field.formControl && field.formControl.get(errorPath_1)) {
                                    if (!isValid) {
                                        field.formControl.get(errorPath_1).setErrors(__assign({}, (field.formControl.get(errorPath_1).errors || {}), (_a = {}, _a[validatorName] = { message: message_1 }, _a)));
                                    }
                                    else {
                                        /** @type {?} */
                                        var errors = (field.formControl.get(errorPath_1).errors || {});
                                        delete errors[validatorName];
                                        field.formControl.get(errorPath_1).setErrors(Object.keys(errors).length === 0 ? null : errors);
                                    }
                                }
                                return isValid ? null : (_b = {}, _b[validatorName] = errorPath_1 ? { errorPath: errorPath_1 } : true, _b);
                            });
                        }
                        else {
                            if (!Array.isArray(field.validators.validation)) {
                                field.validators.validation = [field.validators.validation];
                            }
                            field.validators.validation
                                .forEach(function (validator) { return field._validators.push(_this.wrapNgValidatorFn(field, validator)); });
                        }
                    };
                    for (var validatorName in field.validators) {
                        _loop_1(validatorName);
                    }
                }
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        FieldValidationExtension.prototype.initFieldAsyncValidation = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                if (field._asyncValidators) {
                    return;
                }
                defineHiddenProp(field, '_asyncValidators', []);
                if (field.asyncValidators) {
                    var _loop_2 = function (validatorName) {
                        if (validatorName !== 'validation') {
                            /** @type {?} */
                            var validator_2 = field.asyncValidators[validatorName];
                            if (isObject(validator_2)) {
                                validator_2 = validator_2.expression;
                            }
                            field._asyncValidators.push(function (control) {
                                return new Promise(function (resolve) {
                                    return validator_2(control, field).then(function (result) {
                                        var _a;
                                        resolve(result ? null : (_a = {}, _a[validatorName] = true, _a));
                                    });
                                });
                            });
                        }
                        else {
                            if (!Array.isArray(field.asyncValidators.validation)) {
                                field.asyncValidators.validation = [field.asyncValidators.validation];
                            }
                            field.asyncValidators.validation
                                .forEach(function (validator) { return field._asyncValidators.push(( /** @type {?} */(_this.wrapNgValidatorFn(field, validator)))); });
                        }
                    };
                    for (var validatorName in field.asyncValidators) {
                        _loop_2(validatorName);
                    }
                }
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        FieldValidationExtension.prototype.initPredefinedFieldValidation = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                FORMLY_VALIDATORS
                    .filter(function (opt) { return (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties["templateOptions." + opt]); })
                    .forEach(function (opt) {
                    field._validators.push(function (control) {
                        /** @type {?} */
                        var value = field.templateOptions[opt];
                        if (value === false) {
                            return null;
                        }
                        switch (opt) {
                            case 'required':
                                return forms.Validators.required(control);
                            case 'pattern':
                                return forms.Validators.pattern(value)(control);
                            case 'minLength':
                                return forms.Validators.minLength(value)(control);
                            case 'maxLength':
                                return forms.Validators.maxLength(value)(control);
                            case 'min':
                                return forms.Validators.min(value)(control);
                            case 'max':
                                return forms.Validators.max(value)(control);
                        }
                    });
                });
            };
        /**
         * @private
         * @param {?} field
         * @param {?} validator
         * @return {?}
         */
        FieldValidationExtension.prototype.wrapNgValidatorFn = /**
         * @private
         * @param {?} field
         * @param {?} validator
         * @return {?}
         */
            function (field, validator) {
                validator = typeof validator === 'string'
                    ? this.formlyConfig.getValidator(validator).validation
                    : validator;
                return function (control) { return (( /** @type {?} */(validator)))(control, field); };
            };
        return FieldValidationExtension;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@experimental
     */
    var /**
     * \@experimental
     */ FieldFormExtension = /** @class */ (function () {
        function FieldFormExtension() {
        }
        /**
         * @param {?} field
         * @return {?}
         */
        FieldFormExtension.prototype.onPopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                var _a;
                if (field.key && field.type) {
                    /** @type {?} */
                    var paths_1 = getKeyPath({ key: field.key });
                    /** @type {?} */
                    var rootForm_1 = ( /** @type {?} */(field.parent.formControl));
                    /** @type {?} */
                    var rootModel_1 = field.fieldGroup ? (_a = {}, _a[paths_1[0]] = field.model, _a) : field.model;
                    paths_1.forEach(function (path, index) {
                        // FormGroup/FormArray only allow string value for path
                        /** @type {?} */
                        var formPath = path.toString();
                        // is last item
                        if (index === paths_1.length - 1) {
                            _this.addFormControl(rootForm_1, field, rootModel_1, formPath);
                        }
                        else {
                            if (!rootModel_1[path]) {
                                rootModel_1[path] = typeof path === 'string' ? {} : [];
                            }
                            _this.addFormControl(rootForm_1, { key: formPath, fieldGroup: [], modelOptions: {}, templateOptions: {} }, rootModel_1, formPath);
                            rootForm_1 = ( /** @type {?} */(rootForm_1.get(formPath)));
                            rootModel_1 = rootModel_1[path];
                        }
                    });
                }
                if (field.fieldGroup && !field.formControl) {
                    field.formControl = field.parent.formControl;
                }
            };
        /**
         * @private
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} path
         * @return {?}
         */
        FieldFormExtension.prototype.addFormControl = /**
         * @private
         * @param {?} form
         * @param {?} field
         * @param {?} model
         * @param {?} path
         * @return {?}
         */
            function (form, field, model, path) {
                /** @type {?} */
                var abstractControlOptions = ( /** @type {?} */({
                    validators: field._validators,
                    asyncValidators: field._asyncValidators,
                    updateOn: field.modelOptions.updateOn,
                }));
                /** @type {?} */
                var control;
                if (field.formControl instanceof forms.AbstractControl || form.get(( /** @type {?} */(path)))) {
                    control = field.formControl || form.get(( /** @type {?} */(path)));
                    if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                        && control.value !== model[path]
                        && control instanceof forms.FormControl) {
                        control.patchValue(model[path]);
                    }
                    if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {
                        if (abstractControlOptions.validators) {
                            control.setValidators(abstractControlOptions.validators);
                        }
                        if (abstractControlOptions.asyncValidators) {
                            control.setAsyncValidators(abstractControlOptions.asyncValidators);
                        }
                        control.updateValueAndValidity();
                    }
                }
                else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {
                    /** @type {?} */
                    var component = field._componentFactory.component;
                    console.warn("NgxFormly: '" + component.name + "::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.");
                    control = component.createControl(model[path], field);
                }
                else if (field.fieldGroup && !field.fieldArray) {
                    control = new forms.FormGroup({}, abstractControlOptions);
                }
                else if (field.fieldArray) {
                    control = new forms.FormArray([], abstractControlOptions);
                }
                else {
                    control = new forms.FormControl(model[path], abstractControlOptions);
                }
                if (field.templateOptions.disabled) {
                    control.disable();
                }
                // Replace decorated property with a getter that returns the observable.
                // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
                if (delete field.templateOptions.disabled) {
                    Object.defineProperty(field.templateOptions, 'disabled', {
                        get: function () { return !field.formControl.enabled; },
                        set: function (value) { return value ? field.formControl.disable() : field.formControl.enable(); },
                        enumerable: true,
                        configurable: true,
                    });
                }
                if (field) {
                    field.formControl = control;
                }
                if (form instanceof forms.FormArray) {
                    if (form.at(( /** @type {?} */(path))) !== control) {
                        form.setControl(( /** @type {?} */(path)), control);
                    }
                }
                else {
                    if (form.get(( /** @type {?} */(path))) !== control) {
                        form.setControl(( /** @type {?} */(path)), control);
                    }
                }
            };
        return FieldFormExtension;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@experimental
     */
    var /**
     * \@experimental
     */ CoreExtension = /** @class */ (function () {
        function CoreExtension(formlyConfig) {
            this.formlyConfig = formlyConfig;
            this.formId = 0;
        }
        /**
         * @param {?} field
         * @return {?}
         */
        CoreExtension.prototype.prePopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                this.formlyConfig.createComponentInstance(field);
                this.getFieldComponentInstance(field).prePopulate();
                if (field.parent) {
                    return;
                }
                /** @type {?} */
                var fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
                (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(function (fieldTransform) {
                    if (fieldTransform) {
                        console.warn("NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.");
                        /** @type {?} */
                        var fieldGroup = fieldTransform(field.fieldGroup, field.model, ( /** @type {?} */(field.formControl)), field.options);
                        if (!fieldGroup) {
                            throw new Error('fieldTransform must return an array of fields');
                        }
                    }
                });
            };
        /**
         * @param {?} field
         * @return {?}
         */
        CoreExtension.prototype.onPopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                var _this = this;
                this.initFieldOptions(field);
                this.getFieldComponentInstance(field).onPopulate();
                if (field.fieldGroup) {
                    field.fieldGroup.forEach(function (f, index) {
                        Object.defineProperty(f, 'parent', { get: function () { return field; }, configurable: true });
                        Object.defineProperty(f, 'index', { get: function () { return index; }, configurable: true });
                        _this.formId++;
                    });
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        CoreExtension.prototype.postPopulate = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                this.getFieldComponentInstance(field).postPopulate();
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        CoreExtension.prototype.initFieldOptions = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                /** @type {?} */
                var root = ( /** @type {?} */(field.parent));
                if (!root) {
                    return;
                }
                Object.defineProperty(field, 'form', { get: function () { return root.formControl; }, configurable: true });
                Object.defineProperty(field, 'options', { get: function () { return root.options; }, configurable: true });
                Object.defineProperty(field, 'model', {
                    get: function () { return field.key && field.fieldGroup ? getFieldValue(field) : root.model; },
                    configurable: true,
                });
                field.id = getFieldId("formly_" + this.formId, field, field['index']);
                field.templateOptions = field.templateOptions || {};
                field.modelOptions = field.modelOptions || {};
                field.hooks = field.hooks || {};
                if (field.lifecycle) {
                    console.warn("NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.");
                }
                if (field.type && field.key) {
                    field.templateOptions = Object.assign({
                        label: '',
                        placeholder: '',
                        focus: false,
                    }, field.templateOptions);
                }
                if (field.template && field.type !== 'formly-template') {
                    if (field.type) {
                        console.warn("NgxFormly: passing 'type' property is not allowed when 'template' is set.");
                    }
                    field.type = 'formly-template';
                }
                if (field.type) {
                    this.formlyConfig.getMergedField(field);
                }
                if (field.key && isUndefined(field.defaultValue) && (field.fieldGroup || field.fieldArray)) {
                    field.defaultValue = field.fieldArray ? [] : {};
                }
                if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
                    assignModelValue(root.model, field.key, field.defaultValue);
                }
                this.initFieldWrappers(field);
                if (field.fieldArray) {
                    this.initFieldArray(field);
                }
                if (!field.type && field.fieldGroup) {
                    field.type = 'formly-group';
                }
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        CoreExtension.prototype.initFieldArray = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                field.fieldGroup = field.fieldGroup || [];
                if (field.fieldGroup.length > field.model.length) {
                    for (var i = field.fieldGroup.length; i >= field.model.length; --i) {
                        removeFieldControl(( /** @type {?} */(field.formControl)), i);
                        field.fieldGroup.splice(i, 1);
                    }
                }
                for (var i = field.fieldGroup.length; i < field.model.length; i++) {
                    /** @type {?} */
                    var f = __assign({}, clone(field.fieldArray), { key: "" + i });
                    field.fieldGroup.push(f);
                }
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        CoreExtension.prototype.initFieldWrappers = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                field.wrappers = field.wrappers || [];
                /** @type {?} */
                var fieldTemplateManipulators = __assign({ preWrapper: [], postWrapper: [] }, (field.templateOptions.templateManipulators || {}));
                field.wrappers = __spread(this.formlyConfig.templateManipulators.preWrapper.map(function (m) { return m(field); }), fieldTemplateManipulators.preWrapper.map(function (m) { return m(field); }), field.wrappers, this.formlyConfig.templateManipulators.postWrapper.map(function (m) { return m(field); }), fieldTemplateManipulators.postWrapper.map(function (m) { return m(field); })).filter(function (el, i, a) { return el && i === a.indexOf(el); });
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        CoreExtension.prototype.getFieldComponentInstance = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                /** @type {?} */
                var instance = {};
                if (field._componentFactory && field._componentFactory.componentRef) {
                    instance = field._componentFactory.componentRef.instance;
                }
                return {
                    prePopulate: function () { return instance.prePopulate && instance.prePopulate(field); },
                    onPopulate: function () { return instance.onPopulate && instance.onPopulate(field); },
                    postPopulate: function () { return instance.postPopulate && instance.postPopulate(field); },
                };
            };
        return CoreExtension;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} formlyConfig
     * @return {?}
     */
    function defaultFormlyConfig(formlyConfig) {
        return {
            types: [
                { name: 'formly-group', component: FormlyGroup },
                { name: 'formly-template', component: FormlyTemplateType },
            ],
            extensions: [
                { name: 'core', extension: new CoreExtension(formlyConfig) },
                { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },
                { name: 'field-form', extension: new FieldFormExtension() },
                { name: 'field-expression', extension: new FieldExpressionExtension() },
            ],
        };
    }
    var FormlyModule = /** @class */ (function () {
        function FormlyModule(configService, configs) {
            if (configs === void 0) {
                configs = [];
            }
            if (!configs) {
                return;
            }
            configs.forEach(function (config) { return configService.addConfig(config); });
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        FormlyModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: FormlyModule,
                    providers: [
                        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },
                        { provide: FORMLY_CONFIG, useValue: config, multi: true },
                        { provide: i0.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
                        FormlyConfig,
                        FormlyFormBuilder,
                    ],
                };
            };
        /**
         * @param {?=} config
         * @return {?}
         */
        FormlyModule.forChild = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: FormlyModule,
                    providers: [
                        { provide: FORMLY_CONFIG, useValue: config, multi: true },
                        { provide: i0.ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
                    ],
                };
            };
        FormlyModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            FormlyForm,
                            FormlyField,
                            FormlyAttributes,
                            FormlyGroup,
                            FormlyValidationMessage,
                            FormlyTemplateType,
                        ],
                        entryComponents: [FormlyGroup, FormlyTemplateType],
                        exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],
                        imports: [common.CommonModule],
                    },] }
        ];
        /** @nocollapse */
        FormlyModule.ctorParameters = function () {
            return [
                { type: FormlyConfig },
                { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [FORMLY_CONFIG,] }] }
            ];
        };
        return FormlyModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyForm = FormlyForm;
    exports.FormlyField = FormlyField;
    exports.FormlyAttributes = FormlyAttributes;
    exports.FormlyConfig = FormlyConfig;
    exports.FormlyFormBuilder = FormlyFormBuilder;
    exports.FieldType = FieldType;
    exports.Field = Field;
    exports.FieldArrayType = FieldArrayType;
    exports.FieldWrapper = FieldWrapper;
    exports.FormlyModule = FormlyModule;
    exports.ɵdefineHiddenProp = defineHiddenProp;
    exports.ɵc = FormlyGroup;
    exports.ɵb = defaultFormlyConfig;
    exports.ɵf = CoreExtension;
    exports.ɵi = FieldExpressionExtension;
    exports.ɵh = FieldFormExtension;
    exports.ɵg = FieldValidationExtension;
    exports.ɵa = FORMLY_CONFIG;
    exports.ɵe = FormlyTemplateType;
    exports.ɵd = FormlyValidationMessage;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-core.umd.js.map