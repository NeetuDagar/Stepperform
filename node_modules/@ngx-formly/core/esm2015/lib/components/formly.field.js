/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, Attribute, ComponentFactoryResolver, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
import { defineHiddenProp } from '../utils';
export class FormlyField {
    /**
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     * @param {?} hideDeprecation
     */
    constructor(formlyConfig, componentFactoryResolver, 
    // tslint:disable-next-line
    hideDeprecation) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.className = '';
        this.warnDeprecation = false;
        this.modelChange = new EventEmitter();
        this.warnDeprecation = hideDeprecation === null;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    set form(form) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @return {?}
     */
    get componentRefs() {
        if (!((/** @type {?} */ (this.field)))._componentRefs) {
            defineHiddenProp(this.field, '_componentRefs', []);
        }
        return ((/** @type {?} */ (this.field)))._componentRefs;
    }
    /**
     * @param {?} refs
     * @return {?}
     */
    set componentRefs(refs) {
        ((/** @type {?} */ (this.field)))._componentRefs = refs;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.triggerHook('afterContentInit');
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.triggerHook('afterContentChecked');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.triggerHook('afterViewInit');
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.triggerHook('afterViewChecked');
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.triggerHook('doCheck');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.triggerHook('onInit');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.field) {
            this.renderField(this.field, this.containerRef);
        }
        this.triggerHook('onChanges', changes);
        this.componentRefs.forEach(ref => {
            Object.assign(ref.instance, { field: this.field });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.triggerHook('onDestroy');
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
    }
    /**
     * @private
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    renderField(field, containerRef) {
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
        /** @type {?} */
        const wrappers = (/** @type {?} */ ((field.wrappers || []).map(wrapperName => this.formlyConfig.getWrapper(wrapperName))));
        [...wrappers, Object.assign({}, this.formlyConfig.getType(field.type), { componentFactory: ((/** @type {?} */ (field)))._componentFactory })].forEach(({ component, componentRef }) => {
            /** @type {?} */
            const ref = componentRef ? componentRef : containerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(component));
            Object.assign(ref.instance, { field });
            this.componentRefs.push(ref);
            containerRef = ref.instance.fieldComponent;
        });
    }
    /**
     * @private
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    triggerHook(name, changes) {
        if (this.field.hooks && this.field.hooks[name]) {
            if (!changes || changes.field) {
                this.field.hooks[name](this.field);
            }
        }
        if (this.field.lifecycle && this.field.lifecycle[name]) {
            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);
        }
    }
}
FormlyField.decorators = [
    { type: Component, args: [{
                selector: 'formly-field',
                template: `<ng-template #container></ng-template>`,
                host: {
                    '[style.display]': 'field.hide ? "none":""',
                    '[class]': 'field.className? field.className : className',
                }
            }] }
];
/** @nocollapse */
FormlyField.ctorParameters = () => [
    { type: FormlyConfig },
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }
];
FormlyField.propDecorators = {
    field: [{ type: Input }],
    className: [{ type: Input, args: ['class',] }],
    model: [{ type: Input }],
    form: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.className;
    /** @type {?} */
    FormlyField.prototype.warnDeprecation;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.containerRef;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.formlyConfig;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,