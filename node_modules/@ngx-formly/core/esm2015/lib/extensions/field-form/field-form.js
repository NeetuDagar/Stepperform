/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AbstractControl, FormGroup, FormArray, FormControl } from '@angular/forms';
import { getKeyPath, isNullOrUndefined } from '../../utils';
/**
 * \@experimental
 */
export class FieldFormExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        if (field.key && field.type) {
            /** @type {?} */
            const paths = getKeyPath({ key: field.key });
            /** @type {?} */
            let rootForm = (/** @type {?} */ (field.parent.formControl));
            /** @type {?} */
            let rootModel = field.fieldGroup ? { [paths[0]]: field.model } : field.model;
            paths.forEach((path, index) => {
                // FormGroup/FormArray only allow string value for path
                /** @type {?} */
                const formPath = path.toString();
                // is last item
                if (index === paths.length - 1) {
                    this.addFormControl(rootForm, field, rootModel, formPath);
                }
                else {
                    if (!rootModel[path]) {
                        rootModel[path] = typeof path === 'string' ? {} : [];
                    }
                    this.addFormControl(rootForm, { key: formPath, fieldGroup: [], modelOptions: {}, templateOptions: {} }, rootModel, formPath);
                    rootForm = (/** @type {?} */ (rootForm.get(formPath)));
                    rootModel = rootModel[path];
                }
            });
        }
        if (field.fieldGroup && !field.formControl) {
            field.formControl = field.parent.formControl;
        }
    }
    /**
     * @private
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    addFormControl(form, field, model, path) {
        /** @type {?} */
        const abstractControlOptions = (/** @type {?} */ ({
            validators: field._validators,
            asyncValidators: field._asyncValidators,
            updateOn: field.modelOptions.updateOn,
        }));
        /** @type {?} */
        let control;
        if (field.formControl instanceof AbstractControl || form.get((/** @type {?} */ (path)))) {
            control = field.formControl || form.get((/** @type {?} */ (path)));
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
            if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {
                if (abstractControlOptions.validators) {
                    control.setValidators(abstractControlOptions.validators);
                }
                if (abstractControlOptions.asyncValidators) {
                    control.setAsyncValidators(abstractControlOptions.asyncValidators);
                }
                control.updateValueAndValidity();
            }
        }
        else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {
            /** @type {?} */
            const component = field._componentFactory.component;
            console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);
            control = component.createControl(model[path], field);
        }
        else if (field.fieldGroup && !field.fieldArray) {
            control = new FormGroup({}, abstractControlOptions);
        }
        else if (field.fieldArray) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: () => !field.formControl.enabled,
                set: (value) => value ? field.formControl.disable() : field.formControl.enable(),
                enumerable: true,
                configurable: true,
            });
        }
        if (field) {
            field.formControl = control;
        }
        if (form instanceof FormArray) {
            if (form.at((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
        else {
            if (form.get((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,