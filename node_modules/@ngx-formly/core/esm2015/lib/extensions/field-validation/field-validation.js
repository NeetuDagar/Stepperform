/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Validators } from '@angular/forms';
import { isObject, FORMLY_VALIDATORS, defineHiddenProp } from '../../utils';
/**
 * \@experimental
 */
export class FieldValidationExtension {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        this.initFieldValidation(field);
        this.initFieldAsyncValidation(field);
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldValidation(field) {
        if (field._validators) {
            return;
        }
        defineHiddenProp(field, '_validators', []);
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            for (const validatorName in field.validators) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    let validator = field.validators[validatorName];
                    /** @type {?} */
                    let errorPath;
                    /** @type {?} */
                    let message;
                    if (isObject(validator)) {
                        errorPath = validator.errorPath;
                        message = validator.message;
                        validator = validator.expression;
                    }
                    field._validators.push((control) => {
                        /** @type {?} */
                        const isValid = validator(control, field);
                        if (errorPath && field.formControl && field.formControl.get(errorPath)) {
                            if (!isValid) {
                                field.formControl.get(errorPath).setErrors(Object.assign({}, (field.formControl.get(errorPath).errors || {}), { [validatorName]: { message } }));
                            }
                            else {
                                /** @type {?} */
                                const errors = (field.formControl.get(errorPath).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    field.validators.validation
                        .forEach((validator) => field._validators.push(this.wrapNgValidatorFn(field, validator)));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldAsyncValidation(field) {
        if (field._asyncValidators) {
            return;
        }
        defineHiddenProp(field, '_asyncValidators', []);
        if (field.asyncValidators) {
            for (const validatorName in field.asyncValidators) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    let validator = field.asyncValidators[validatorName];
                    if (isObject(validator)) {
                        validator = validator.expression;
                    }
                    field._asyncValidators.push((control) => new Promise((resolve) => {
                        return validator(control, field).then((result) => {
                            resolve(result ? null : { [validatorName]: true });
                        });
                    }));
                }
                else {
                    if (!Array.isArray(field.asyncValidators.validation)) {
                        field.asyncValidators.validation = [field.asyncValidators.validation];
                    }
                    field.asyncValidators.validation
                        .forEach((validator) => field._asyncValidators.push((/** @type {?} */ (this.wrapNgValidatorFn(field, validator)))));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initPredefinedFieldValidation(field) {
        FORMLY_VALIDATORS
            .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))
            .forEach((opt) => {
            field._validators.push((control) => {
                /** @type {?} */
                const value = field.templateOptions[opt];
                if (value === false) {
                    return null;
                }
                switch (opt) {
                    case 'required':
                        return Validators.required(control);
                    case 'pattern':
                        return Validators.pattern(value)(control);
                    case 'minLength':
                        return Validators.minLength(value)(control);
                    case 'maxLength':
                        return Validators.maxLength(value)(control);
                    case 'min':
                        return Validators.min(value)(control);
                    case 'max':
                        return Validators.max(value)(control);
                }
            });
        });
    }
    /**
     * @private
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    wrapNgValidatorFn(field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return (control) => ((/** @type {?} */ (validator)))(control, field);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    FieldValidationExtension.prototype.formlyConfig;
}
//# sourceMappingURL=data:application/json;base64,